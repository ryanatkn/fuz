import{c as r,s as e,a as d,r as t,t as l,b as dt,f as K,d as i}from"./disclose-version.D-YpP91c.js";import{g as o,n as x,C as Q,p as De,t as ye,a as Ae,U as Pe,d as O,V as it}from"./runtime.CLWtUI7-.js";import{i as D}from"./if.t2Adprt1.js";import{p as me}from"./proxy.BywKGEcJ.js";import{C as w}from"./Code.CZGB2Sdr.js";import{r as lt,g as mt,d as vt}from"./theme.svelte.BfYEDjkQ.js";import{T as ut}from"./Tome_Detail.6B1bbpTb.js";import{D as Me}from"./Details.CSMAYy6E.js";import{s as Le,D as je}from"./Dialog.DanKENvk.js";import{g as ht}from"./tome.BEaQ-Zqd.js";import{C as _t,T as pt}from"./Theme_Input.kgZ5E_EJ.js";import{T as be}from"./Tome_Subheading.B0uQB2a4.js";import{s as Te}from"./render.DClLgGuB.js";import{e as ft}from"./each.BqXyQR24.js";import{r as We,f as Ve}from"./attributes.laNZifmC.js";import{e as Ue}from"./svelte-head.BslmLo-c.js";import{b as bt}from"./input.bte73Sgg.js";import{p as gt}from"./props.BqHnzyJo.js";import{s as yt}from"./style.iv2mhl8q.js";import{M as ge}from"./Mdn_Link.DJGSzZLX.js";const Tt=async(p,s,n,v)=>{x(s,!1),x(n,!1);try{await navigator.clipboard.writeText(v.text)}catch{x(n,!0);return}x(s,!0)};var wt=l('<small class="color_b_5 svelte-1y2zubh">copied!</small>'),St=l('<small class="color_c_5 svelte-1y2zubh">failed</small>'),kt=l('<div class="copy_to_clipboard svelte-1y2zubh"><button type="button" class="icon_button">üìã</button> <!> <!></div>');function xt(p,s){let n=Q(!1),v=Q(!1);var m=kt(),h=r(m);h.__click=[Tt,n,v,s],yt(h,"font-size","var(--size_lg)");var u=e(e(h,!0));D(u,()=>o(n),S=>{var _=wt();d(S,_)});var C=e(e(u,!0));D(C,()=>o(v),S=>{var _=St();d(S,_)}),t(m),d(p,m)}Ue(["click"]);var Ct=l("<blockquote> </blockquote>"),$t=l('<div class="variable svelte-11ggo28"><div class="name svelte-11ggo28"><code> </code></div> <!> <label><div class="title">light</div> <input disabled></label> <label><div class="title">dark</div> <input disabled></label></div>');function It(p,s){De(s,!0);var n=dt(),v=K(n);D(v,()=>s.variable,m=>{var h=$t(),u=r(h),C=r(u),S=r(C);t(C),t(u);var _=e(e(u,!0));D(_,()=>s.variable.summary,I=>{var z=Ct(),E=r(z);t(z),ye(()=>Te(E,s.variable.summary)),d(I,z)});var R=e(e(_,!0)),A=r(R),B=e(e(A,!0));We(B),t(R);var $=e(e(R,!0)),f=r($),b=e(e(f,!0));We(b),t($),t(h),ye(()=>{Te(S,`--${s.variable.name??""}`),Ve(B,s.variable.light??""),Ve(b,s.variable.dark??"")}),d(m,h)}),d(p,n),Ae()}const zt=(p,s,n,v)=>{var m;o(s)&&((m=n.onsave)==null||m.call(n,o(v)))},Mt=(p,s)=>{s(p),alert("TODO")};var Pt=l("edit",1),Wt=l("create",1),Dt=l("save changes",1),At=l("create theme",1),Bt=(p,s,n)=>s(p,Pe(n)),Et=l('<button type="button" class="variable menu_item svelte-cno0i6"> </button>'),Ft=l('<div class="copy svelte-cno0i6"><!></div> <!>',1),qt=l('<div class="pane"><div class="panel p_lg box"><!> <aside>‚ö†Ô∏è This is unfinished and will change.</aside> <button type="button">ok</button></div></div>'),Nt=l('<div class="theme_form svelte-cno0i6"><h2 class="text_align_center"><!> theme</h2> <aside>‚ö†Ô∏è Creating and editing themes at runtime is a work in progress i.e. totally unfinished.</aside> <header class="svelte-cno0i6"><div class="variables_header svelte-cno0i6"><p> </p> <button type="button" class="w_100" disabled>add a variable</button></div> <form class="svelte-cno0i6"><label><div class="title">name</div> <input placeholder=">"></label> <button type="button"><!></button></form></header> <div class="content svelte-cno0i6"><div class="variables svelte-cno0i6"></div> <div class="rendered svelte-cno0i6"><!></div></div></div> <!>',1);function Ot(p,s){De(s,!0);const n=gt(s,"theme",3,null);let v=Q(me(n()?n().name:"new theme")),m=Q(me(n()?n().variables:[]));const h=O(()=>({name:o(v),variables:o(m)})),u=O(()=>lt(o(h),{empty_default_theme:!1,specificity:1})),C=O(()=>o(m).reduce((a,c)=>c.light?a+1:a,0)),S=O(()=>o(m).reduce((a,c)=>c.dark?a+1:a,0));let _=Q(null);const R=(a,c)=>{Le(a),x(_,me(c)),x(m,me(o(m).slice()))},A=O(()=>!!n()),B=O(()=>n()?o(v)!==n().name||o(m)!==n().variables:!0);var $=Nt(),f=K($),b=r(f),I=r(b);D(I,()=>o(A),a=>{var c=Pt();d(a,c)},a=>{var c=Wt();d(a,c)}),i(),t(b);var z=e(e(b,!0)),E=e(e(z,!0)),X=r(E),Y=r(X),ve=r(Y);t(Y);var ue=e(e(Y,!0));ue.__click=[Mt,Le],t(X);var Z=e(e(X,!0)),ee=r(Z),te=r(ee),re=e(e(te,!0));We(re),t(ee);var F=e(e(ee,!0));F.__click=[zt,B,s,h];var we=r(F);D(we,()=>o(A),a=>{var c=Dt();d(a,c)},a=>{var c=At();d(a,c)}),t(F),t(Z),t(E);var oe=e(e(E,!0)),ae=r(oe);ft(ae,77,()=>o(m),(a,c)=>Pe(a).name,(a,c,q)=>{var k=Et();k.__click=[Bt,R,c];var M=r(k);t(k),ye(()=>Te(M,`--${Pe(c).name??""}`)),d(a,k)}),t(ae);var se=e(e(ae,!0)),he=r(se);D(he,()=>o(u),a=>{var c=Ft(),q=K(c),k=r(q);xt(k,{get text(){return o(u)}}),t(q);var M=e(e(q,!0));w(M,{get content(){return o(u)},lang:"css"}),d(a,c)}),t(se),t(oe),t(f);var _e=e(e(f,!0));D(_e,()=>o(_),a=>{je(a,{onclose:()=>x(_,null),children:(q,k=it)=>{var M=qt(),G=r(M),ne=r(G);It(ne,{get variable(){return o(_)}});var ce=e(e(ne,!0)),de=e(e(ce,!0));de.__click=k(),t(G),t(M),d(q,M)}})}),ye(()=>{Te(ve,`variables: ${o(C)??""} light, ${o(S)??""} dark`),F.disabled=!o(B)}),bt(re,()=>o(v),a=>x(v,a)),d(p,$),Ae()}Ue(["click"]);var Rt=l("CSS custom properties",1),Jt=l("Why the singleton?",1),Lt=l(`<aside><p>Most theme usage affects the whole page, so Fuz makes that easy.</p> <p>By default <code>Themed</code> syncs its settings to the global <code>:root</code> tag and
					persists to <code>localStorage</code>.</p> <p>These behaviors can be customized with its props:</p> <ul><li><code>sync_color_scheme</code></li> <li><code>load_color_scheme</code></li> <li><code>save_color_scheme</code></li> <li><code>load_theme</code></li> <li><code>save_theme</code></li></ul> <p>A feature to support partial page theming is planned with <code>Themed_Scope</code>.</p></aside>`),Vt=l("Why nested children?",1),jt=l(`<aside><p><code>Themed</code> is designed to wrap every page at the top level so it can provide the
					selected theme and color scheme in the Svelte context via a <code>themer</code> instance.
					It works without children, but <code>get_themer</code> will fail unless you call <code>set_themer</code> yourself.</p> <p>This lets you call <code>get_themer</code> to access the reactive <code>Themer</code> class instance anywhere in your code. The helper components on this page like <code>Color_Scheme_Input</code> and <code>Theme_Input</code> use it so they don't require
					a <code>themer</code> prop.</p> <p>If you don't don't want to wrap everything in <code>Themed</code> for some reason, you can
					set a <code>Themer</code> in context manually. It must be the same reference as the <code>Themed</code> prop:</p> <!></aside>`),Ut=l("More about <code>Color_Scheme_Input</code>",1),Yt=l(`<aside><p><code>Color_Scheme_Input</code> enables users to choose and persist the color scheme without
					boilerplate.</p> <p>By default, <code>Color_Scheme_Input</code> works with <code>Themed</code>'s <code>themer</code> in context to save the user's preference to <code>localStorage</code>.
					To customize this behavior, pass your own <code>value</code> or <code>onchange</code> props. The <code>value</code> defaults to <code>get_themer()</code> so technically you
					could call <code>set_themer</code>, but it's unlikely you want to override it in context.</p></aside>`),Gt=l(`<section class="theme"><p>Fuz provides UI components that use <a href="https://moss.ryanatkn.com/library/themes">Moss' theming system</a> for dark mode and custom themes.</p> <p><code>Themed</code> adds global support for both the browser's <!> and custom themes based on <a href="https://moss.ryanatkn.com/library/variables">Moss style variables</a>, which use <!>. <code>Themed</code> is a singleton component that's mounted at the top-level of the page:</p> <!> <!> <!> <!></section> <section class="theme"><!> <p><code>Themed</code> defaults to automatic <!> detection with <!>, and users can also set it directly:</p> <!> <!> <!> <p>Pass props to override the default:</p> <!> <p>The builtin themes support both dark and light color schemes. Custom themes may support one or
			both color schemes.</p> <!></section> <section class="theme"><!> <p>A theme is a simple JSON collection of <a href="https://moss.ryanatkn.com/library/variables">Moss style variables</a> that can be transformed into CSS that set custom properties. Each variable can have values for
			light and/or dark color schemes. In other words, "dark" isn't a theme, it's a mode that any theme
			can implement.</p> <div class="width_sm mb_lg"><!></div> <aside>‚ö†Ô∏è The builtin themes need a lot more work, but the proof of concept seems to work.</aside> <aside>‚ö†Ô∏è Custom themes currently pop in on page load. To see this, change from the base theme and
			refresh the page. This can be fixed using a similar strategy that we use to avoid pop-in of
			user-defined color schemes, but it's more involved.</aside></section> <section class="theme"><!> <p>Themes are plain CSS that can be sourced in a variety of ways.</p> <p>To use Fuz's base theme:</p> <!> <p><code>Themed</code> can be customized with the the nonreactive prop <code>themer</code>:</p> <!> <!> <aside>The <code>themer</code> prop is not reactive because it's put in Svelte context without a wrapper.
			This could be fixed, let me know if you have a usecase.</aside> <p><code>Themed</code> sets the <code>themer</code> in the Svelte context:</p> <!> <p>For a more complete example, see <a href="https://github.com/ryanatkn/fuz_template">fuz_template</a>.</p></section> <section><!> <p><code>Themed</code> initializes the system's theme support. Without it, the page will not
			reflect the user's system <code>color-scheme</code>. By default, <code>Themed</code> applies the base theme to the root
			of the page via <code>create_theme_setup_script</code>. It uses JS to add the <code>.dark</code> CSS class to the <code>:root</code> element.</p> <p>This strategy enables color scheme and theme support with minimal CSS and optimal performance
			for most use cases. The system supports plain CSS usage that can be static or dynamic, or
			imported at buildtime or runtime. It also allows runtime access to the underlying data like
			the <a href="https://moss.ryanatkn.com/library/variables">style variables</a> if you want to pay
			the performance costs. Scoped theming to one part of the page is planned.</p> <p>The theme setup script interacts with <code>sync_color_scheme</code> to save the user's
			preference to <code>localStorage</code>. See also <code>Color_Scheme_Input</code>.</p> <p>The setup script avoids flash-on-load due to color scheme, but currently themes flash in after
			loading. We'll try to fix this when the system stabilizes.</p></section>`,1),Ht=l('<div class="pane"><div class="theme_editor_wrapper panel svelte-1io66l"><!></div></div>'),Kt=l("<!> <!>",1);function fr(p,s){De(s,!0);const v=ht("Themed"),m=vt.slice(),h=mt();let u=Q(null);var C=Kt(),S=K(C);ut(S,{tome:v,children:(A,B)=>{var $=Gt(),f=K($),b=r(f);e(r(b)),i(),t(b);var I=e(e(b,!0)),z=r(I),E=e(e(z,!0));ge(E,{path:"Web/CSS/color-scheme"});var X=e(e(E,!0)),Y=e(e(X,!0));ge(Y,{path:"Web/CSS/--*",children:(H,g)=>{i();var y=Rt();d(H,y)},$$slots:{default:!0}}),e(e(Y,!0)),i(),t(I);var ve=e(e(I,!0));w(ve,{content:"import Themed from '@ryanatkn/fuz/Themed.svelte';",lang:"ts"});var ue=e(e(ve,!0));w(ue,{content:`<!-- +layout.svelte -->
<Themed>
	{@render children()}
</Themed>`});var Z=e(e(ue,!0));Me(Z,{summary:g=>{i();var y=Jt();d(g,y)},children:(g,y)=>{var T=Lt(),P=r(T),N=e(e(P,!0)),ie=e(r(N)),le=e(e(ie,!0));e(e(le,!0)),i(),t(N);var J=e(e(N,!0)),L=e(e(J,!0)),V=r(L);r(V),t(V);var j=e(e(V,!0));r(j),t(j);var U=e(e(j,!0));r(U),t(U);var W=e(e(U,!0));r(W),t(W);var pe=e(e(W,!0));r(pe),t(pe),t(L);var fe=e(e(L,!0));e(r(fe)),i(),t(fe),t(T),d(g,T)},$$slots:{default:!0}});var ee=e(e(Z,!0));Me(ee,{summary:g=>{i();var y=Vt();d(g,y)},children:(g,y)=>{var T=jt(),P=r(T),N=r(P),ie=e(e(N,!0)),le=e(e(ie,!0));e(e(le,!0)),i(),t(P);var J=e(e(P,!0)),L=e(r(J)),V=e(e(L,!0)),j=e(e(V,!0)),U=e(e(j,!0));e(e(U,!0)),i(),t(J);var W=e(e(J,!0)),pe=e(r(W)),fe=e(e(pe,!0));e(e(fe,!0)),i(),t(W);var ct=e(e(W,!0));w(ct,{content:`<script>
	const themer = new Themer(...);
	set_themer(themer);
<\/script>
<Themed {themer} />
<!--
	sibling components not nested in \`Themed\`
	can now call \`get_themer\`
-->`}),t(T),d(g,T)},$$slots:{default:!0}}),t(f);var te=e(e(f,!0)),re=r(te);be(re,{text:"Color scheme",slug:"color-scheme"});var F=e(e(re,!0)),we=r(F),oe=e(e(we,!0));ge(oe,{path:"Web/CSS/color-scheme"});var ae=e(e(oe,!0));ge(ae,{path:"Web/CSS/@media/prefers-color-scheme"}),i(),t(F);var se=e(e(F,!0));_t(se,{});var he=e(e(se,!0));w(he,{content:"import Color_Scheme_Input from '@ryanatkn/fuz/Color_Scheme_Input.svelte';",lang:"ts"});var _e=e(e(he,!0));w(_e,{content:"<Color_Scheme_Input />"});var a=e(e(_e,!0)),c=e(e(a,!0)),q=O(()=>`<Color_Scheme_Input
	value={{color_scheme: ${"'"+JSON.stringify(h.color_scheme).replace(/"/g,"")+"'"}}}
	onchange={...}
/>`);w(c,{get content(){return o(q)}});var k=e(e(c,!0)),M=e(e(k,!0));Me(M,{summary:g=>{i();var y=Ut();e(K(y,!0)),d(g,y)},children:(g,y)=>{var T=Yt(),P=r(T);r(P),i(),t(P);var N=e(e(P,!0)),ie=e(r(N)),le=e(e(ie,!0)),J=e(e(le,!0)),L=e(e(J,!0)),V=e(e(L,!0)),j=e(e(V,!0)),U=e(e(j,!0)),W=e(e(U,!0));e(e(W,!0)),i(),t(N),t(T),d(g,T)},$$slots:{default:!0}}),t(te);var G=e(e(te,!0)),ne=r(G);be(ne,{text:"Builtin themes",slug:"builtin-themes"});var ce=e(e(ne,!0));e(r(ce)),i(),t(ce);var de=e(e(ce,!0)),Ye=r(de);pt(Ye,{themes:m,enable_editing:!0,onedit:H=>x(u,me(H))}),t(de);var Ge=e(e(de,!0));e(e(Ge,!0)),t(G);var Se=e(e(G,!0)),Be=r(Se);be(Be,{text:"Example usage",slug:"example-usage"});var He=e(e(Be,!0)),Ke=e(e(He,!0)),Ee=e(e(Ke,!0));w(Ee,{content:`<!-- +layout.svelte -->
<script>
	import '@ryanatkn/moss/style.css';
	import '@ryanatkn/moss/theme.css';
	import Themed from '@ryanatkn/fuz/Themed.svelte';
	import type {Snippet} from 'svelte';

	interface Props {
		children: Snippet;
	}
	
	const {children}: Props = $props();
<script>

<!-- enable theme and color-scheme support -->
<Themed>
	{@render children()}
</Themed>`});var ke=e(e(Ee,!0)),Qe=r(ke);e(e(Qe,!0)),i(),t(ke);var Fe=e(e(ke,!0));w(Fe,{content:`import {Themer} from '@ryanatkn/fuz/theme.svelte.js';
const themer = new Themer(...);`,lang:"ts"});var qe=e(e(Fe,!0));w(qe,{content:`<Themed {themer}>
	{@render children()}
</Themed>`});var xe=e(e(qe,!0));e(r(xe)),i(),t(xe);var Ce=e(e(xe,!0)),Xe=r(Ce);e(e(Xe,!0)),i(),t(Ce);var Ne=e(e(Ce,!0)),Ze=O(()=>`// get values from the Svelte context provided by
// the nearest \`Themed\` ancestor:
import {get_themer} from '@ryanatkn/fuz/theme.js';
const themer = get_themer();
themer.theme.name; // '${h.theme.name}'
themer.color_scheme; // '${h.color_scheme}'`);w(Ne,{get content(){return o(Ze)},lang:"ts"});var Oe=e(e(Ne,!0));e(r(Oe)),i(),t(Oe),t(Se);var Re=e(e(Se,!0)),Je=r(Re);be(Je,{text:"More details",slug:"more-details"});var $e=e(e(Je,!0)),et=r($e),tt=e(e(et,!0)),rt=e(e(tt,!0)),ot=e(e(rt,!0)),at=e(e(ot,!0));e(e(at,!0)),i(),t($e);var Ie=e(e($e,!0));e(r(Ie)),i(),t(Ie);var ze=e(e(Ie,!0)),st=e(r(ze)),nt=e(e(st,!0));e(e(nt,!0)),i(),t(ze),e(e(ze,!0)),t(Re),d(A,$)},$$slots:{default:!0}});var _=e(S,!0);_.nodeValue="  ";var R=e(_);D(R,()=>o(u),A=>{je(A,{onclose:()=>x(u,null),children:(B,$)=>{var f=Ht(),b=r(f),I=r(b);Ot(I,{get theme(){return o(u)},onsave:z=>{console.log("update theme",z),alert("todo")}}),t(b),t(f),d(B,f)},$$slots:{default:!0}})}),d(p,C),Ae()}export{It as S,fr as _};
