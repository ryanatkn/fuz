import{k as O,a as r,c as ve,t as v,o as pe}from"./disclose-version.wRvYSyy1.js";import{a as ne,c as n,f as W,g as o,s as e,r as s,t as Q,p as le,a6 as H,G as q,a4 as z,d as N,a3 as fe}from"./runtime.B8zI9S7i.js";import{i as A,p as K}from"./if.DFss4aZz.js";import{C as P}from"./Code.DNd3NYOU.js";import{r as be,t as ge,d as ye}from"./theme.svelte.DXJa5zTJ.js";import{T as Te}from"./Tome_Content.cpCwaNT5.js";import{D as de}from"./Details.gEkhQB_-.js";import{D as ue,s as _e}from"./Dialog.B81aMeUN.js";import{g as ke}from"./tome.BnH-qN73.js";import{C as we,T as xe}from"./Theme_Input.DlIUCH62.js";import{T as oe,a as ae}from"./Tome_Section_Header.DtrUEmAt.js";import{s as se}from"./render.v2A4C8c0.js";import{e as Se}from"./context_helpers.DVYNiYXA.js";import{s as Ce,a as Ie,r as me,c as he}from"./attributes.CjH3HRzo.js";import{b as ze}from"./input.B5Kxv6fA.js";import{p as Pe}from"./props.DMJ_h2Rv.js";import{M as re}from"./Mdn_Link.dBrfPlbp.js";var Me=v('<small class="indicator color_b_5 svelte-fqik3v">copied!</small>'),We=v('<small class="indicator color_c_5 svelte-fqik3v">failed</small>'),qe=v("<button><!><!><!></button>");function Ae(x,t){ne(t,!0);let c=H(!1),p=H(!1);const u=async i=>{var m,g;if(t.text!==null){q(c,!1),q(p,!1);try{await navigator.clipboard.writeText(t.text)}catch{q(p,!0),(m=t.onclick)==null||m.call(t,null,i);return}q(c,!0),(g=t.onclick)==null||g.call(t,t.text,i)}};var f=qe();let b;var M=n(f);A(M,()=>t.children,i=>{var m=ve(),g=W(m);Ce(g,()=>t.children,()=>o(c),()=>o(p)),r(i,m)},i=>{var m=O("üìã");r(i,m)});var B=e(M);A(B,()=>o(c),i=>{var m=Me();r(i,m)});var I=e(B);A(I,()=>o(p),i=>{var m=We();r(i,m)}),s(f),Q(()=>{var i;return b=Ie(f,b,{...t.attrs,type:"button",class:t.classes??(t.children?void 0:"icon_button size_lg"),onclick:u,disabled:((i=t.attrs)==null?void 0:i.disabled)??t.text===null},"svelte-fqik3v")}),r(x,f),le()}var Be=v("<blockquote> </blockquote>"),De=v('<div class="variable svelte-11ggo28"><div class="name svelte-11ggo28"><code> </code></div> <!> <label><div class="title">light</div> <input disabled></label> <label><div class="title">dark</div> <input disabled></label></div>');function Ee(x,t){ne(t,!0);var c=ve(),p=W(c);A(p,()=>t.variable,u=>{var f=De(),b=n(f),M=n(b),B=n(M);s(M),s(b);var I=e(b,2);A(I,()=>t.variable.summary,S=>{var C=Be(),R=n(C,!0);s(C),Q(()=>se(R,t.variable.summary)),r(S,C)});var i=e(I,2),m=e(n(i),2);me(m),s(i);var g=e(i,2),y=e(n(g),2);me(y),s(g),s(f),Q(()=>{se(B,`--${t.variable.name??""}`),he(m,t.variable.light??""),he(y,t.variable.dark??"")}),r(u,f)}),r(x,c),le()}const Fe=(x,t,c,p)=>{var u;o(t)&&((u=c.onsave)==null||u.call(c,o(p)))},Ne=x=>{_e(x),alert("TODO")};var Oe=(x,t,c)=>t(x,o(c)),Re=v('<button type="button" class="variable menu_item svelte-cno0i6"> </button>'),Je=v('<div class="copy svelte-cno0i6"><!></div> <!>',1),Le=v('<div class="pane"><div class="panel p_lg box"><!> <aside>‚ö†Ô∏è This is unfinished and will change.</aside> <button type="button">ok</button></div></div>'),je=v('<div class="theme_form svelte-cno0i6"><h2 class="text_align_center"><!> theme</h2> <aside>‚ö†Ô∏è Creating and editing themes at runtime is a work in progress i.e. totally unfinished.</aside> <header class="svelte-cno0i6"><div class="variables_header svelte-cno0i6"><p> </p> <button type="button" class="w_100" disabled>add a variable</button></div> <form class="svelte-cno0i6"><label><div class="title">name</div> <input placeholder=">"></label> <button type="button"><!></button></form></header> <div class="content svelte-cno0i6"><div class="variables svelte-cno0i6"></div> <div class="rendered svelte-cno0i6"><!></div></div></div> <!>',1);function Ye(x,t){ne(t,!0);const c=Pe(t,"theme",3,null);let p=H(K(c()?c().name:"new theme")),u=H(K(c()?c().variables:[]));const f=N(()=>({name:o(p),variables:o(u)})),b=N(()=>be(o(f),{empty_default_theme:!1,specificity:1})),M=N(()=>o(u).reduce((a,l)=>l.light?a+1:a,0)),B=N(()=>o(u).reduce((a,l)=>l.dark?a+1:a,0));let I=H(null);const i=(a,l)=>{_e(a),q(I,K(l)),q(u,K(o(u).slice()))},m=N(()=>!!c()),g=N(()=>c()?o(p)!==c().name||o(u)!==c().variables:!0);var y=je(),S=W(y),C=n(S),R=n(C);A(R,()=>o(m),a=>{var l=O("edit");r(a,l)},a=>{var l=O("create");r(a,l)}),z(),s(C);var L=e(C,4),j=n(L),Y=n(j),ce=n(Y);s(Y);var X=e(Y,2);X.__click=[Ne],s(j);var U=e(j,2),G=n(U),Z=e(n(G),2);me(Z),s(G);var _=e(G,2);_.__click=[Fe,g,t,f];var T=n(_);A(T,()=>o(m),a=>{var l=O("save changes");r(a,l)},a=>{var l=O("create theme");r(a,l)}),s(_),s(U),s(L);var d=e(L,2),h=n(d);Se(h,21,()=>o(u),a=>a.name,(a,l)=>{var w=Re();w.__click=[Oe,i,l];var F=n(w);s(w),Q(()=>se(F,`--${o(l).name??""}`)),r(a,w)}),s(h);var k=e(h,2),D=n(k);A(D,()=>o(b),a=>{var l=Je(),w=W(l),F=n(w);Ae(F,{get text(){return o(b)}}),s(w);var J=e(w,2);P(J,{get content(){return o(b)},lang:"css"}),r(a,l)}),s(k),s(d),s(S);var E=e(S,2);A(E,()=>o(I),a=>{ue(a,{onclose:()=>q(I,null),children:(w,F=fe)=>{var J=Le(),$=n(J),ie=n($);Ee(ie,{get variable(){return o(I)}});var V=e(ie,4);V.__click=function(...ee){var te;(te=F())==null||te.apply(this,ee)},s($),s(J),r(w,J)},$$slots:{default:!0}})}),Q(()=>{se(ce,`variables: ${o(M)??""} light, ${o(B)??""} dark`),_.disabled=!o(g)}),ze(Z,()=>o(p),a=>q(p,a)),r(x,y),le()}pe(["click"]);var Ge=v(`<aside><p>Most theme usage affects the whole page, so Fuz makes that easy.</p> <p>By default <code>Themed</code> syncs its settings to the global <code>:root</code> tag and
					persists to <code>localStorage</code>.</p> <p>These behaviors can be customized with its props:</p> <ul><li><code>sync_color_scheme</code></li> <li><code>load_color_scheme</code></li> <li><code>save_color_scheme</code></li> <li><code>load_theme</code></li> <li><code>save_theme</code></li></ul> <p>A feature to support partial page theming is planned with <code>Themed_Scope</code>.</p></aside>`),He=v(`<aside><p><code>Themed</code> is designed to wrap every page at the top level so it can provide the
					selected theme and color scheme in the Svelte context via a <code>themer</code> instance.
					It works without children, but <code>themer_context.get()</code> will fail unless you call <code>themer_context.set()</code> yourself.</p> <p>This lets you call <code>themer_context.get()</code> to access the reactive <code>Themer</code> class instance anywhere in your code. The helper components on this page like <code>Color_Scheme_Input</code> and <code>Theme_Input</code> use it so they don't require
					a <code>themer</code> prop.</p> <p>If you don't don't want to wrap everything in <code>Themed</code> for some reason, you can
					set a <code>Themer</code> in context manually. It must be the same reference as the <code>Themed</code> prop:</p> <!></aside>`),Ue=v("More about <code>Color_Scheme_Input</code>",1),Ve=v(`<aside><p><code>Color_Scheme_Input</code> enables users to choose and persist the color scheme without
					boilerplate.</p> <p>By default, <code>Color_Scheme_Input</code> works with <code>Themed</code>'s <code>themer</code> in context to save the user's preference to <code>localStorage</code>.
					To customize this behavior, pass your own <code>value</code> or <code>onchange</code> props. The <code>value</code> defaults to <code>themer_context.get()</code> so technically
					you could call <code>set_themer</code>, but it's unlikely you want to override it in
					context.</p></aside>`),Ke=v(`<!> <p><code>Themed</code> defaults to automatic <!> detection with <!>, and users can also set it directly:</p> <!> <!> <!> <p>Pass props to override the default:</p> <!> <p>The builtin themes support both dark and light color schemes. Custom themes may support one or
			both color schemes.</p> <!>`,1),Qe=v(`<!> <p>A theme is a simple JSON collection of <a href="https://moss.ryanatkn.com/library/variables">Moss style variables</a> that can be transformed into CSS that set custom properties. Each variable can have values for
			light and/or dark color schemes. In other words, "dark" isn't a theme, it's a mode that any theme
			can implement.</p> <div class="width_sm mb_lg"><!></div> <aside>‚ö†Ô∏è The builtin themes need a lot more work, but the proof of concept seems to work.</aside> <aside>‚ö†Ô∏è Custom themes currently pop in on page load. To see this, change from the base theme and
			refresh the page. This can be fixed using a similar strategy that we use to avoid pop-in of
			user-defined color schemes, but it's more involved.</aside>`,1),Xe=v(`<!> <p>Themes are plain CSS that can be sourced in a variety of ways.</p> <p>To use Fuz's base theme:</p> <!> <p><code>Themed</code> can be customized with the the nonreactive prop <code>themer</code>:</p> <!> <!> <aside>The <code>themer</code> prop is not reactive because it's put in Svelte context without a wrapper.
			This could be fixed, let me know if you have a usecase.</aside> <p><code>Themed</code> sets the <code>themer</code> in the Svelte context:</p> <!> <p>For a more complete example, see <a href="https://github.com/ryanatkn/fuz_template">fuz_template</a>.</p>`,1),Ze=v(`<!> <p><code>Themed</code> initializes the system's theme support. Without it, the page will not
			reflect the user's system <code>color-scheme</code>. By default, <code>Themed</code> applies the base theme to the root
			of the page via <code>create_theme_setup_script</code>. It uses JS to add the <code>.dark</code> CSS class to the <code>:root</code> element.</p> <p>This strategy enables color scheme and theme support with minimal CSS and optimal performance
			for most use cases. The system supports plain CSS usage that can be static or dynamic, or
			imported at buildtime or runtime. It also allows runtime access to the underlying data like
			the <a href="https://moss.ryanatkn.com/library/variables">style variables</a> if you want to pay
			the performance costs. Scoped theming to one part of the page is planned.</p> <p>The theme setup script interacts with <code>sync_color_scheme</code> to save the user's
			preference to <code>localStorage</code>. See also <code>Color_Scheme_Input</code>.</p> <p>The setup script avoids flash-on-load due to color scheme, but currently themes flash in after
			loading. We'll try to fix this when the system stabilizes.</p>`,1),$e=v(`<section class="theme"><p>Fuz provides UI components that use <a href="https://moss.ryanatkn.com/library/themes">Moss' theming system</a> for dark mode and custom themes.</p> <p><code>Themed</code> adds global support for both the browser's <!> and custom themes based on <a href="https://moss.ryanatkn.com/library/variables">Moss style variables</a>, which use <!>. <code>Themed</code> is a singleton component that's mounted at the top-level of the page:</p> <!> <!> <!> <!></section> <!> <!> <!> <!>`,1),et=v('<div class="pane"><div class="theme_editor_wrapper panel svelte-1io66l"><!></div></div>'),tt=v("<!>  <!>",1);function gt(x,t){ne(t,!0);const p=ke("Themed"),u=ye.slice(),f=ge.get();let b=H(null);var M=tt(),B=W(M);Te(B,{tome:p,children:(i,m)=>{var g=$e(),y=W(g),S=e(n(y),2),C=e(n(S),2);re(C,{path:"Web/CSS/color-scheme"});var R=e(C,4);re(R,{path:"Web/CSS/--*",children:(_,T)=>{z();var d=O("CSS custom properties");r(_,d)},$$slots:{default:!0}}),z(3),s(S);var L=e(S,2);P(L,{content:"import Themed from '@ryanatkn/fuz/Themed.svelte';",lang:"ts"});var j=e(L,2);P(j,{content:`<!-- +layout.svelte -->
<Themed>
	{@render children()}
</Themed>`});var Y=e(j,2);de(Y,{summary:T=>{z();var d=O("Why the singleton?");r(T,d)},children:(T,d)=>{var h=Ge();r(T,h)},$$slots:{summary:!0,default:!0}});var ce=e(Y,2);de(ce,{summary:T=>{z();var d=O("Why nested children?");r(T,d)},children:(T,d)=>{var h=He(),k=e(n(h),6);P(k,{content:`<script>
	const themer = new Themer(...);
	set_themer(themer);
<\/script>
<Themed {themer} />
<!--
	sibling components not nested in \`Themed\`
	can now call \`themer_context.get()\`
-->`}),s(h),r(T,h)},$$slots:{summary:!0,default:!0}}),s(y);var X=e(y,2);oe(X,{children:(_,T)=>{var d=Ke(),h=W(d);ae(h,{text:"Color scheme"});var k=e(h,2),D=e(n(k),2);re(D,{path:"Web/CSS/color-scheme"});var E=e(D,2);re(E,{path:"Web/CSS/@media/prefers-color-scheme"}),z(),s(k);var a=e(k,2);we(a,{});var l=e(a,2);P(l,{content:"import Color_Scheme_Input from '@ryanatkn/fuz/Color_Scheme_Input.svelte';",lang:"ts"});var w=e(l,2);P(w,{content:"<Color_Scheme_Input />"});var F=e(w,4),J=N(()=>`<Color_Scheme_Input
	value={{color_scheme: ${"'"+JSON.stringify(f.color_scheme).replace(/"/g,"")+"'"}}}
	onchange={...}
/>`);P(F,{get content(){return o(J)}});var $=e(F,4);de($,{summary:V=>{z();var ee=Ue();z(),r(V,ee)},children:(V,ee)=>{var te=Ve();r(V,te)},$$slots:{summary:!0,default:!0}}),r(_,d)},$$slots:{default:!0}});var U=e(X,2);oe(U,{children:(_,T)=>{var d=Qe(),h=W(d);ae(h,{text:"Builtin themes"});var k=e(h,4),D=n(k);xe(D,{themes:u,enable_editing:!0,onedit:E=>q(b,K(E))}),s(k),z(4),r(_,d)},$$slots:{default:!0}});var G=e(U,2);oe(G,{children:(_,T)=>{var d=Xe(),h=W(d);ae(h,{text:"Example usage"});var k=e(h,6);P(k,{content:`<!-- +layout.svelte -->
<script>
	import '@ryanatkn/moss/style.css';
	import '@ryanatkn/moss/theme.css';
	import Themed from '@ryanatkn/fuz/Themed.svelte';
	import type {Snippet} from 'svelte';

	interface Props {
		children: Snippet;
	}
	
	const {children}: Props = $props();
<\/script>

<!-- enable theme and color-scheme support -->
<Themed>
	{@render children()}
</Themed>`});var D=e(k,4);P(D,{content:`import {Themer} from '@ryanatkn/fuz/theme.svelte.js';
const themer = new Themer(...);`,lang:"ts"});var E=e(D,2);P(E,{content:`<Themed {themer}>
	{@render children()}
</Themed>`});var a=e(E,6),l=N(()=>`// get values from the Svelte context provided by
// the nearest \`Themed\` ancestor:
import {themer_context} from '@ryanatkn/fuz/theme.svelte.js';
const themer = themer_context.get();
themer.theme.name; // '${f.theme.name}'
themer.color_scheme; // '${f.color_scheme}'`);P(a,{get content(){return o(l)},lang:"ts"}),z(2),r(_,d)},$$slots:{default:!0}});var Z=e(G,2);oe(Z,{children:(_,T)=>{var d=Ze(),h=W(d);ae(h,{text:"More details"}),z(8),r(_,d)},$$slots:{default:!0}}),r(i,g)},$$slots:{default:!0}});var I=e(B,2);A(I,()=>o(b),i=>{ue(i,{onclose:()=>q(b,null),children:(m,g)=>{var y=et(),S=n(y),C=n(S);Ye(C,{get theme(){return o(b)},onsave:R=>{console.log("update theme",R),alert("todo")}}),s(S),s(y),r(m,y)},$$slots:{default:!0}})}),r(x,M),le()}export{Ee as S,gt as _};
