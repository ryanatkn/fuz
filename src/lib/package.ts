// Generated by package.gen.ts
// Do not edit directly - regenerated on build

import type {Package_Json} from '@ryanatkn/belt/package_json.js';
import type {Src_Json} from '$lib/src_json.js';

export const package_json: Package_Json = {
	name: '@ryanatkn/fuz',
	version: '0.147.0',
	description: 'Svelte UI library',
	motto: 'friendly user zystem',
	glyph: 'ðŸ§¶',
	logo: 'logo.svg',
	logo_alt: 'a friendly brown spider facing you',
	public: true,
	license: 'MIT',
	homepage: 'https://www.fuz.dev/',
	author: {
		name: 'Ryan Atkinson',
		email: 'mail@ryanatkn.com',
		url: 'https://www.ryanatkn.com/',
	},
	repository: {
		type: 'git',
		url: 'git+https://github.com/ryanatkn/fuz.git',
	},
	bugs: 'https://github.com/ryanatkn/fuz/issues',
	funding: 'https://www.ryanatkn.com/funding',
	scripts: {
		start: 'gro dev',
		dev: 'gro dev',
		build: 'gro build',
		check: 'gro check',
		test: 'gro test',
		preview: 'vite preview',
		deploy: 'gro deploy',
	},
	type: 'module',
	engines: {
		node: '>=22.15',
	},
	peerDependencies: {
		'@ryanatkn/belt': '^0.36.0',
		'@ryanatkn/gro': '^0.171.0',
		'@ryanatkn/moss': '^0.36.2',
		'@sveltejs/kit': '^2.26',
		'esm-env': '^1',
		svelte: '^5',
		svelte2tsx: '^0.7.45',
	},
	peerDependenciesMeta: {
		'@ryanatkn/gro': {
			optional: true,
		},
		'esm-env': {
			optional: true,
		},
	},
	devDependencies: {
		'@changesets/changelog-git': '^0.2.1',
		'@ryanatkn/belt': '^0.36.0',
		'@ryanatkn/eslint-config': '^0.8.0',
		'@ryanatkn/fuz_code': '^0.30.0',
		'@ryanatkn/gro': '^0.171.0',
		'@ryanatkn/moss': '^0.36.3',
		'@sveltejs/adapter-static': '^3.0.10',
		'@sveltejs/kit': '^2.47.3',
		'@sveltejs/package': '^2.5.4',
		'@sveltejs/vite-plugin-svelte': '^6.2.1',
		'@types/node': '^24.3.0',
		eslint: '^9.34.0',
		'eslint-plugin-svelte': '^3.12.5',
		'esm-env': '^1.2.2',
		jsdom: '^27.0.1',
		prettier: '^3.6.2',
		'prettier-plugin-svelte': '^3.4.0',
		svelte: '^5.41.3',
		'svelte-check': '^4.3.3',
		svelte2tsx: '^0.7.45',
		tslib: '^2.8.1',
		typescript: '^5.9.3',
		'typescript-eslint': '^8.41.0',
		vitest: '^3.2.4',
	},
	prettier: {
		plugins: ['prettier-plugin-svelte'],
		useTabs: true,
		printWidth: 100,
		singleQuote: true,
		bracketSpacing: false,
		overrides: [
			{
				files: 'package.json',
				options: {
					useTabs: false,
				},
			},
		],
	},
	sideEffects: ['**/*.css'],
	files: ['dist', 'src/lib/**/*.ts', '!src/lib/**/*.test.*', '!dist/**/*.test.*'],
	exports: {
		'./package.json': './package.json',
		'./*.js': {
			types: './dist/*.d.ts',
			default: './dist/*.js',
		},
		'./*.ts': {
			types: './dist/*.d.ts',
			default: './dist/*.js',
		},
		'./*.svelte': {
			types: './dist/*.svelte.d.ts',
			svelte: './dist/*.svelte',
			default: './dist/*.svelte',
		},
	},
};

export const src_json: Src_Json = {
	name: '@ryanatkn/fuz',
	version: '0.147.0',
	modules: {
		'./Alert.svelte': {
			path: 'Alert.svelte',
			declarations: [
				{
					name: 'Alert',
					kind: 'component',
					props: [
						{
							name: 'status',
							type: 'Alert_Status',
							optional: true,
						},
						{
							name: 'color',
							type: 'string',
							optional: true,
						},
						{
							name: 'onclick',
							type: '(() => void) | undefined',
							optional: true,
						},
						{
							name: 'disabled',
							type: 'boolean',
							optional: true,
						},
						{
							name: 'attrs',
							type: 'HTMLAttributes<HTMLElement> | undefined',
							optional: true,
						},
						{
							name: 'icon',
							type: 'string | Snippet<[icon: string]> | null | undefined',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Api_Page.svelte': {
			path: 'Api_Page.svelte',
			declarations: [
				{
					name: 'Api_Page',
					kind: 'component',
					props: [
						{
							name: 'decl',
							type: 'Src_Module_Declaration',
							optional: false,
						},
						{
							name: 'module_path',
							type: 'string',
							optional: false,
						},
						{
							name: 'src_module',
							type: 'any',
							optional: true,
						},
						{
							name: 'pkg_name',
							type: 'string',
							optional: true,
						},
						{
							name: 'repo_url',
							type: 'string',
							optional: true,
						},
						{
							name: 'homepage_url',
							type: 'string',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Breadcrumb.svelte': {
			path: 'Breadcrumb.svelte',
			declarations: [
				{
					name: 'Breadcrumb',
					kind: 'component',
					props: [
						{
							name: 'path',
							type: 'string | undefined',
							optional: true,
							description: 'Prefixed with a slash and relative to the base path.',
						},
						{
							name: 'selected_path',
							type: 'string | null | undefined',
							optional: true,
							description:
								'Prefixed with a slash and relative to the base path.\n`null` means none and `undefined` is detected from the current url.',
						},
						{
							name: 'base_path',
							type: 'string',
							optional: true,
							description:
								'Sets a custom base path of `path` and `selected_path`.\nDefaults to `base` from `$app/paths`.',
						},
						{
							name: 'separator',
							type: 'Snippet',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Card.svelte': {
			path: 'Card.svelte',
			declarations: [
				{
					name: 'Card',
					kind: 'component',
					props: [
						{
							name: 'tag',
							type: 'string | undefined',
							optional: true,
						},
						{
							name: 'href',
							type: 'string | undefined',
							optional: true,
						},
						{
							name: 'align',
							type: "'left' | 'right' | 'above' | 'below'",
							optional: true,
						},
						{
							name: 'attrs',
							type: 'any',
							optional: true,
						},
						{
							name: 'icon',
							type: 'string | Snippet',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Color_Scheme_Input.svelte': {
			path: 'Color_Scheme_Input.svelte',
			declarations: [
				{
					name: 'Color_Scheme_Input',
					kind: 'component',
					props: [
						{
							name: 'value',
							type: '{color_scheme: Color_Scheme}',
							optional: true,
						},
						{
							name: 'onchange',
							type: '(color_scheme: Color_Scheme) => void',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Community_Links.svelte': {
			path: 'Community_Links.svelte',
			declarations: [
				{
					name: 'Community_Links',
					kind: 'component',
					props: [
						{
							name: 'selected',
							type: "'webdevladder.net' | 'ryanatkn.com'",
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Community_Links_Panel.svelte': {
			path: 'Community_Links_Panel.svelte',
			declarations: [
				{
					name: 'Community_Links_Panel',
					kind: 'component',
					props: [
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Contextmenu.svelte': {
			path: 'Contextmenu.svelte',
			declarations: [
				{
					name: 'Contextmenu',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Contextmenu_Entry.svelte': {
			path: 'Contextmenu_Entry.svelte',
			declarations: [
				{
					name: 'Contextmenu_Entry',
					kind: 'component',
					props: [
						{
							name: 'run',
							type: 'Contextmenu_Run',
							optional: false,
						},
						{
							name: 'icon',
							type: 'string | Snippet',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: false,
						},
						{
							name: 'disabled',
							type: 'boolean',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Contextmenu_Link_Entry.svelte': {
			path: 'Contextmenu_Link_Entry.svelte',
			declarations: [
				{
					name: 'Contextmenu_Link_Entry',
					kind: 'component',
					props: [
						{
							name: 'href',
							type: 'string',
							optional: false,
						},
						{
							name: 'icon',
							type: 'string | Snippet<[icon: string]>',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
						{
							name: 'disabled',
							type: 'boolean',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Contextmenu_Root.svelte': {
			path: 'Contextmenu_Root.svelte',
			declarations: [
				{
					name: 'Contextmenu_Root',
					kind: 'component',
					doc_comment:
						"Touch event handler for tap-then-longpress bypass detection.\n\nThis allows users to access the native context menu by performing a tap\nfollowed by a longpress/rightclick within a specified time window.\nThe bypass gesture is useful for accessing browser features like text selection\nor the native context menu when the Fuz contextmenu would normally override it.\n\nNote: preventDefault is not called as we're only observing touch patterns,\nnot intercepting them. The actual bypass happens in on_window_contextmenu.",
					summary: 'Touch event handler for tap-then-longpress bypass detection.',
					props: [
						{
							name: 'contextmenu',
							type: 'Contextmenu_State',
							optional: true,
							description:
								"The `contextmenu` prop is not reactive because that's a rare corner case and\nit's easier to put the `contextmenu` directly in the context\nrather than wrapping with a store or other reactivity.\nIf you need to change the contextmenu prop for some reason, use a `{#key contextmenu}` block:\nhttps://svelte.dev/docs#template-syntax-key",
						},
						{
							name: 'open_offset_x',
							type: 'number',
							optional: true,
							description:
								'The number of pixels to offset from the pointer X position when opened.\nUseful to ensure the first menu item is immediately under the pointer.',
						},
						{
							name: 'open_offset_y',
							type: 'number',
							optional: true,
							description:
								'The number of pixels to offset from the pointer Y position when opened.\nUseful to ensure the first menu item is immediately under the pointer.',
						},
						{
							name: 'bypass_with_tap_then_longpress',
							type: 'boolean',
							optional: true,
							description:
								'Whether to detect tap-then-longpress to bypass the Fuz contextmenu.\nThis allows access to the system contextmenu by tapping once then rightclicking/long-pressing.\nSetting to `false` disables the gesture.',
						},
						{
							name: 'bypass_window',
							type: 'number',
							optional: true,
							description:
								"The number of milliseconds between taps to detect a gesture that bypasses the Fuz contextmenu.\nUsed only when `bypass_with_tap_then_longpress` is true.\nIf the duration is too long, it'll detect more false positives and interrupt normal usage,\nbut too short and some people will have difficulty performing the gesture.",
						},
						{
							name: 'bypass_move_tolerance',
							type: 'number',
							optional: true,
							description:
								'The number of pixels the pointer can be moved between taps to detect a tap-then-longpress.\nUsed only when `bypass_with_tap_then_longpress` is true.',
						},
						{
							name: 'scoped',
							type: 'boolean',
							optional: true,
							description:
								'If `true`, wraps `children` with a div and listens to events on it instead of the window.',
						},
						{
							name: 'link_entry',
							type: 'Snippet<[ComponentProps<typeof Contextmenu_Link_Entry>]> | null',
							optional: true,
							description:
								'Snippet for rendering link entries.\nSet to `null` to disable automatic link detection.\nDefaults to `link_entry_default` which renders `Contextmenu_Link_Entry`.',
						},
						{
							name: 'text_entry',
							type: 'Snippet<[ComponentProps<typeof Contextmenu_Text_Entry>]> | null',
							optional: true,
							description:
								'Snippet for rendering copy text entries.\nSet to `null` to disable automatic copy text detection.\nDefaults to `text_entry_default` which renders `Contextmenu_Text_Entry`.',
						},
						{
							name: 'separator_entry',
							type: 'Snippet<[ComponentProps<typeof Contextmenu_Separator>]> | null',
							optional: true,
							description:
								'Snippet for rendering separator entries.\nSet to `null` to disable automatic separator rendering.\nDefaults to `separator_entry_default` which renders `Contextmenu_Separator`.',
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Contextmenu_Root_For_Safari_Compatibility.svelte': {
			path: 'Contextmenu_Root_For_Safari_Compatibility.svelte',
			declarations: [
				{
					name: 'Contextmenu_Root_For_Safari_Compatibility',
					kind: 'component',
					doc_comment:
						"Blocks the next click event. Set to true when a longpress completes to prevent\niOS's synthesized click from activating the first menu item.",
					summary:
						"Blocks the next click event. Set to true when a longpress completes to prevent\niOS's synthesized click from activating the first menu item.",
					props: [
						{
							name: 'contextmenu',
							type: 'Contextmenu_State',
							optional: true,
							description:
								"The `contextmenu` prop is not reactive because that's a rare corner case and\nit's easier to put the `contextmenu` directly in the context\nrather than wrapping with a store or other reactivity.\nIf you need to change the contextmenu prop for some reason, use a `{#key contextmenu}` block:\nhttps://svelte.dev/docs#template-syntax-key",
						},
						{
							name: 'longpress_move_tolerance',
							type: 'number',
							optional: true,
							description:
								'The number of pixels the pointer can be moved without canceling `longpress`.',
						},
						{
							name: 'longpress_duration',
							type: 'number',
							optional: true,
							description:
								'The number of milliseconds after a touch starts before opening the Fuz contextmenu.',
						},
						{
							name: 'bypass_with_tap_then_longpress',
							type: 'boolean',
							optional: true,
							description:
								'Whether to detect tap-then-longpress to bypass the Fuz contextmenu.\nThis allows access to the system contextmenu by tapping once then long-pressing.\nSetting to `false` disables the gesture.',
						},
						{
							name: 'bypass_window',
							type: 'number',
							optional: true,
							description:
								"The number of milliseconds between taps to detect a gesture that bypasses the Fuz contextmenu.\nUsed only when `bypass_with_tap_then_longpress` is true.\nIf the duration is too long, it'll detect more false positives and interrupt normal usage,\nbut too short and some people will have difficulty performing the gesture.",
						},
						{
							name: 'bypass_move_tolerance',
							type: 'number',
							optional: true,
							description:
								'The number of pixels the pointer can be moved between taps to detect a tap-then-longpress.\nUsed only when `bypass_with_tap_then_longpress` is true.',
						},
						{
							name: 'open_offset_x',
							type: 'number',
							optional: true,
							description:
								'The number of pixels to offset from the pointer X position when opened.\nUseful to ensure the first menu item is immediately under the pointer.',
						},
						{
							name: 'open_offset_y',
							type: 'number',
							optional: true,
							description:
								'The number of pixels to offset from the pointer Y position when opened.\nUseful to ensure the first menu item is immediately under the pointer.',
						},
						{
							name: 'scoped',
							type: 'boolean',
							optional: true,
							description:
								'If `true`, wraps `children` with a div and listens to events on it instead of the window.',
						},
						{
							name: 'link_entry',
							type: 'Snippet<[ComponentProps<typeof Contextmenu_Link_Entry>]> | null',
							optional: true,
							description:
								'Snippet for rendering link entries.\nSet to `null` to disable automatic link detection.\nDefaults to `link_entry_default` which renders `Contextmenu_Link_Entry`.',
						},
						{
							name: 'text_entry',
							type: 'Snippet<[ComponentProps<typeof Contextmenu_Text_Entry>]> | null',
							optional: true,
							description:
								'Snippet for rendering copy text entries.\nSet to `null` to disable automatic copy text detection.\nDefaults to `text_entry_default` which renders `Contextmenu_Text_Entry`.',
						},
						{
							name: 'separator_entry',
							type: 'Snippet<[ComponentProps<typeof Contextmenu_Separator>]> | null',
							optional: true,
							description:
								'Snippet for rendering separator entries.\nSet to `null` to disable automatic separator rendering.\nDefaults to `separator_entry_default` which renders `Contextmenu_Separator`.',
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Contextmenu_Separator.svelte': {
			path: 'Contextmenu_Separator.svelte',
			declarations: [
				{
					name: 'Contextmenu_Separator',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Contextmenu_Submenu.svelte': {
			path: 'Contextmenu_Submenu.svelte',
			declarations: [
				{
					name: 'Contextmenu_Submenu',
					kind: 'component',
					props: [
						{
							name: 'icon',
							type: 'Snippet',
							optional: true,
						},
						{
							name: 'menu',
							type: 'Snippet',
							optional: false,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Contextmenu_Text_Entry.svelte': {
			path: 'Contextmenu_Text_Entry.svelte',
			declarations: [
				{
					name: 'Contextmenu_Text_Entry',
					kind: 'component',
					props: [
						{
							name: 'run',
							type: 'Contextmenu_Run',
							optional: false,
						},
						{
							name: 'content',
							type: 'string',
							optional: false,
						},
						{
							name: 'icon',
							type: 'string',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Copy_To_Clipboard.svelte': {
			path: 'Copy_To_Clipboard.svelte',
			declarations: [
				{
					name: 'Copy_To_Clipboard',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Declaration_Link.svelte': {
			path: 'Declaration_Link.svelte',
			declarations: [
				{
					name: 'Declaration_Link',
					kind: 'component',
					doc_comment: 'Show tooltip on mouse hover with ARIA-compliant delay',
					summary: 'Show tooltip on mouse hover with ARIA-compliant delay',
					props: [
						{
							name: 'decl',
							type: 'Src_Module_Declaration',
							optional: false,
							description: 'The declaration to link to',
						},
						{
							name: 'module_path',
							type: 'string',
							optional: false,
							description: 'Module path (e.g., "alert.ts")',
						},
						{
							name: 'pkg_name',
							type: 'string',
							optional: false,
							description: 'Package name for generating import statements',
						},
						{
							name: 'repo_url',
							type: 'string',
							optional: true,
							description: 'Repository URL for source links',
						},
						{
							name: 'homepage_url',
							type: 'string | null',
							optional: true,
							description: 'Homepage URL for docs links',
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
							description: 'Optional content to display (defaults to declaration name)',
						},
					],
					source_line: 1,
				},
			],
		},
		'./Details.svelte': {
			path: 'Details.svelte',
			declarations: [
				{
					name: 'Details',
					kind: 'component',
					doc_comment: 'Like `details` but renders children lazily by default.',
					summary: 'Like `details` but renders children lazily by default.',
					source_line: 1,
				},
			],
		},
		'./Dialog.svelte': {
			path: 'Dialog.svelte',
			declarations: [
				{
					name: 'Dialog',
					kind: 'component',
					props: [
						{
							name: 'container',
							type: 'HTMLElement',
							optional: true,
						},
						{
							name: 'layout',
							type: 'Dialog_Layout',
							optional: true,
							description: '',
						},
						{
							name: 'index',
							type: 'number',
							optional: true,
							description:
								'index 0 is under 1 is under 2 etc -- the topmost dialog is the last in the array',
						},
						{
							name: 'active',
							type: 'boolean',
							optional: true,
							description: '',
						},
						{
							name: 'content_selector',
							type: 'string | null',
							optional: true,
							description:
								'If provided, prevents clicks that would close the dialog\nfrom bubbling past any elements matching this selector.',
						},
						{
							name: 'onclose',
							type: '() => void',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet<[close: (e?: Event) => void]>',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Dialogs.svelte': {
			path: 'Dialogs.svelte',
			declarations: [
				{
					name: 'Dialogs',
					kind: 'component',
					props: [
						{
							name: 'dialogs',
							type: 'Array<Dialog_Params>',
							optional: false,
						},
						{
							name: 'onclose',
							type: '() => void',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet<[dialog: Dialog_Params]>',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Docs.svelte': {
			path: 'Docs.svelte',
			declarations: [
				{
					name: 'Docs',
					kind: 'component',
					props: [
						{
							name: 'tomes',
							type: 'Array<Tome>',
							optional: false,
						},
						{
							name: 'pkg',
							type: 'Pkg',
							optional: false,
						},
						{
							name: 'breadcrumb_children',
							type: 'Snippet<[is_primary_nav: boolean]>',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Docs_Content.svelte': {
			path: 'Docs_Content.svelte',
			declarations: [
				{
					name: 'Docs_Content',
					kind: 'component',
					props: [
						{
							name: 'tomes',
							type: 'Array<Tome>',
							optional: false,
						},
						{
							name: 'pkg',
							type: 'Pkg',
							optional: false,
						},
						{
							name: 'repo_name',
							type: 'Snippet<[repo_name: string]>',
							optional: true,
						},
						{
							name: 'content',
							type: 'Snippet',
							optional: true,
						},
						{
							name: 'header',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Docs_Footer.svelte': {
			path: 'Docs_Footer.svelte',
			declarations: [
				{
					name: 'Docs_Footer',
					kind: 'component',
					props: [
						{
							name: 'pkg',
							type: 'Pkg',
							optional: false,
						},
						{
							name: 'root_url',
							type: 'Url | null',
							optional: true,
						},
						{
							name: 'logo',
							type: 'Snippet',
							optional: true,
						},
						{
							name: 'logo_header',
							type: 'Snippet',
							optional: true,
						},
						{
							name: 'logo_footer',
							type: 'Snippet',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Docs_Menu.svelte': {
			path: 'Docs_Menu.svelte',
			declarations: [
				{
					name: 'Docs_Menu',
					kind: 'component',
					props: [
						{
							name: 'tomes',
							type: 'Array<Tome>',
							optional: false,
						},
						{
							name: 'children',
							type: 'Snippet<[category: string]>',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Docs_Menu_Header.svelte': {
			path: 'Docs_Menu_Header.svelte',
			declarations: [
				{
					name: 'Docs_Menu_Header',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Docs_Page_Links.svelte': {
			path: 'Docs_Page_Links.svelte',
			declarations: [
				{
					name: 'Docs_Page_Links',
					kind: 'component',
					props: [
						{
							name: 'sidebar',
							type: 'boolean',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Docs_Primary_Nav.svelte': {
			path: 'Docs_Primary_Nav.svelte',
			declarations: [
				{
					name: 'Docs_Primary_Nav',
					kind: 'component',
					props: [
						{
							name: 'pkg',
							type: 'Pkg',
							optional: false,
						},
						{
							name: 'breadcrumb_children',
							type: 'Snippet<[is_primary_nav: boolean]>',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Docs_Secondary_Nav.svelte': {
			path: 'Docs_Secondary_Nav.svelte',
			declarations: [
				{
					name: 'Docs_Secondary_Nav',
					kind: 'component',
					props: [
						{
							name: 'tomes',
							type: 'Array<Tome>',
							optional: false,
						},
						{
							name: 'sidebar',
							type: 'boolean',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Docs_Tertiary_Nav.svelte': {
			path: 'Docs_Tertiary_Nav.svelte',
			declarations: [
				{
					name: 'Docs_Tertiary_Nav',
					kind: 'component',
					props: [
						{
							name: 'tomes',
							type: 'Array<Tome>',
							optional: false,
						},
						{
							name: 'tomes_by_name',
							type: 'Map<string, Tome>',
							optional: false,
						},
						{
							name: 'sidebar',
							type: 'boolean',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Glyph.svelte': {
			path: 'Glyph.svelte',
			declarations: [
				{
					name: 'Glyph',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Hashlink.svelte': {
			path: 'Hashlink.svelte',
			declarations: [
				{
					name: 'Hashlink',
					kind: 'component',
					props: [
						{
							name: 'slug',
							type: 'string',
							optional: false,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Hidden_Personal_Links.svelte': {
			path: 'Hidden_Personal_Links.svelte',
			declarations: [
				{
					name: 'Hidden_Personal_Links',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Hue_Input.svelte': {
			path: 'Hue_Input.svelte',
			declarations: [
				{
					name: 'Hue_Input',
					kind: 'component',
					props: [
						{
							name: 'value',
							type: 'Hue',
							optional: true,
						},
						{
							name: 'oninput',
							type: '(hue: Hue) => void',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Identifier.svelte': {
			path: 'Identifier.svelte',
			declarations: [
				{
					name: 'Identifier',
					kind: 'component',
					doc_comment:
						'Searches for the identifier name in package metadata.\nReturns true if the identifier exists in the package modules.',
					summary:
						'Searches for the identifier name in package metadata.\nReturns true if the identifier exists in the package modules.',
					props: [
						{
							name: 'name',
							type: 'string',
							optional: false,
						},
						{
							name: 'code_attrs',
							type: "SvelteHTMLElements['code_attrs']",
							optional: true,
						},
						{
							name: 'attrs',
							type: "SvelteHTMLElements['a']",
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Identifier_Link.svelte': {
			path: 'Identifier_Link.svelte',
			declarations: [
				{
					name: 'Identifier_Link',
					kind: 'component',
					props: [
						{
							name: 'name',
							type: 'string',
							optional: false,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Identifier_Link_Or_Ts.svelte': {
			path: 'Identifier_Link_Or_Ts.svelte',
			declarations: [
				{
					name: 'Identifier_Link_Or_Ts',
					kind: 'component',
					props: [
						{
							name: 'type',
							type: 'string',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Img_Or_Svg.svelte': {
			path: 'Img_Or_Svg.svelte',
			declarations: [
				{
					name: 'Img_Or_Svg',
					kind: 'component',
					props: [
						{
							name: 'src',
							type: 'string',
							optional: false,
						},
						{
							name: 'label',
							type: 'string',
							optional: true,
						},
						{
							name: 'size',
							type: 'string',
							optional: true,
							description:
								'Sets both the `width` and `height` of the svg. Overridden by the `width` and `height` props.',
						},
						{
							name: 'width',
							type: 'string',
							optional: true,
							description: 'Sets the `width` of the svg. Overrides `size`.',
						},
						{
							name: 'height',
							type: 'string',
							optional: true,
							description: 'Sets the `height` of the svg. Overrides `size`.',
						},
						{
							name: 'svg_attrs',
							type: "SvelteHTMLElements['svg']",
							optional: true,
						},
						{
							name: 'img_attrs',
							type: "SvelteHTMLElements['img']",
							optional: true,
						},
						{
							name: 'attrs',
							type: "Pick<SvelteHTMLElements['div'], 'class' | 'style'>",
							optional: true,
							description: 'Shared attributes for both img and svg.',
						},
					],
					source_line: 1,
				},
			],
		},
		'./Mdn_Link.svelte': {
			path: 'Mdn_Link.svelte',
			declarations: [
				{
					name: 'Mdn_Link',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Module_Link.svelte': {
			path: 'Module_Link.svelte',
			declarations: [
				{
					name: 'Module_Link',
					kind: 'component',
					props: [
						{
							name: 'module_path',
							type: 'string',
							optional: false,
						},
						{
							name: 'src_module',
							type: 'Src_Module',
							optional: true,
						},
						{
							name: 'pkg_name',
							type: 'string',
							optional: false,
						},
						{
							name: 'repo_url',
							type: 'string',
							optional: true,
						},
						{
							name: 'homepage_url',
							type: 'string | null',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Package_Detail.svelte': {
			path: 'Package_Detail.svelte',
			declarations: [
				{
					name: 'Package_Detail',
					kind: 'component',
					props: [
						{
							name: 'pkg',
							type: 'Pkg',
							optional: false,
						},
						{
							name: 'repo_name',
							type: 'Snippet<[repo_name: string]>',
							optional: true,
						},
						{
							name: 'description',
							type: 'Snippet<[description: string]>',
							optional: true,
						},
						{
							name: 'motto',
							type: 'Snippet<[description: string]>',
							optional: true,
						},
						{
							name: 'npm_url',
							type: 'Snippet<[npm_url: string]>',
							optional: true,
						},
						{
							name: 'homepage_url',
							type: 'Snippet<[homepage_url: string]>',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet<[pkg: Pkg]>',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Package_Summary.svelte': {
			path: 'Package_Summary.svelte',
			declarations: [
				{
					name: 'Package_Summary',
					kind: 'component',
					props: [
						{
							name: 'pkg',
							type: 'Pkg',
							optional: false,
						},
						{
							name: 'repo_name',
							type: 'Snippet<[repo_name: string]>',
							optional: true,
						},
						{
							name: 'logo',
							type: 'Snippet<[logo_url: string, logo_alt: string]>',
							optional: true,
						},
						{
							name: 'motto',
							type: 'Snippet<[motto: string, glyph?: string]>',
							optional: true,
						},
						{
							name: 'description',
							type: 'Snippet<[description: string, glyph?: string]>',
							optional: true,
						},
						{
							name: 'npm_url',
							type: 'Snippet<[npm_url: string]>',
							optional: true,
						},
						{
							name: 'homepage_url',
							type: 'Snippet<[homepage_url: string]>',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Paste_From_Clipboard.svelte': {
			path: 'Paste_From_Clipboard.svelte',
			declarations: [
				{
					name: 'Paste_From_Clipboard',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Pending_Animation.svelte': {
			path: 'Pending_Animation.svelte',
			declarations: [
				{
					name: 'Pending_Animation',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Pending_Button.svelte': {
			path: 'Pending_Button.svelte',
			declarations: [
				{
					name: 'Pending_Button',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Project_Links.svelte': {
			path: 'Project_Links.svelte',
			declarations: [
				{
					name: 'Project_Links',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Redirect.svelte': {
			path: 'Redirect.svelte',
			declarations: [
				{
					name: 'Redirect',
					kind: 'component',
					props: [
						{
							name: 'host',
							type: 'string',
							optional: true,
							description:
								'The target host to redirect to. Defaults to the current `location.host`.',
						},
						{
							name: 'path',
							type: 'string',
							optional: true,
							description:
								'The target path to redirect to. Defaults to the current `location.pathname`.',
						},
						{
							name: 'auto',
							type: 'boolean',
							optional: true,
							description:
								'Should the redirect happen automatically without user input? Defaults to `true`.',
						},
						{
							name: 'children',
							type: 'Snippet<[url: string]>',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Spiders.svelte': {
			path: 'Spiders.svelte',
			declarations: [
				{
					name: 'Spiders',
					kind: 'component',
					doc_comment: 'Returns the minute of the current day.',
					summary: 'Returns the minute of the current day.',
					props: [
						{
							name: 'spiders',
							type: 'Array<string>',
							optional: true,
						},
						{
							name: 'seed',
							type: 'unknown',
							optional: true,
						},
						{
							name: 'random',
							type: 'typeof Math.random',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Svg.svelte': {
			path: 'Svg.svelte',
			declarations: [
				{
					name: 'Svg',
					kind: 'component',
					props: [
						{
							name: 'data',
							type: 'Svg_Data',
							optional: false,
						},
						{
							name: 'fill',
							type: 'string | null',
							optional: true,
							description: 'Overrides `data.fill`.',
						},
						{
							name: 'size',
							type: 'string',
							optional: true,
							description:
								'Sets both the `width` and `height` of the svg. Overridden by the `width` and `height` props.',
						},
						{
							name: 'width',
							type: 'string',
							optional: true,
							description: 'Sets the `width` of the svg. Overrides `size`.',
						},
						{
							name: 'height',
							type: 'string',
							optional: true,
							description: 'Sets the `height` of the svg. Overrides `size`.',
						},
						{
							name: 'label',
							type: 'string',
							optional: true,
						},
						{
							name: 'inline',
							type: 'boolean',
							optional: true,
							description:
								'Renders the SVG as an inline block with spacing appropriate for text. Defaults to `false`.',
						},
						{
							name: 'shrink',
							type: 'boolean',
							optional: true,
							description: 'Flex shrink behavior? Defaults to `true`.',
						},
						{
							name: 'attrs',
							type: "SvelteHTMLElements['svg']",
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Teleport.svelte': {
			path: 'Teleport.svelte',
			declarations: [
				{
					name: 'Teleport',
					kind: 'component',
					props: [
						{
							name: 'to',
							type: 'HTMLElement | undefined | null',
							optional: true,
							description:
								"Defaults to `undefined` to lessen friction with SSR.\nWe may want to change this to optionally accept a string selector,\nbut that didn't seem to be the best API for the `Dialog`.",
						},
						{
							name: 'onmove',
							type: '(el: HTMLElement, to: HTMLElement) => void',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Theme_Input.svelte': {
			path: 'Theme_Input.svelte',
			declarations: [
				{
					name: 'Theme_Input',
					kind: 'component',
					props: [
						{
							name: 'selected_theme',
							type: '{theme: Theme}',
							optional: true,
						},
						{
							name: 'themes',
							type: 'Array<Theme>',
							optional: true,
						},
						{
							name: 'enable_editing',
							type: 'boolean',
							optional: true,
						},
						{
							name: 'select',
							type: '((theme: Theme) => void | boolean) | null',
							optional: true,
						},
						{
							name: 'onselect',
							type: '(theme: Theme) => void',
							optional: true,
						},
						{
							name: 'onedit',
							type: '(theme: Theme) => void',
							optional: true,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Themed.svelte': {
			path: 'Themed.svelte',
			declarations: [
				{
					name: 'Themed',
					kind: 'component',
					props: [
						{
							name: 'sync_color_scheme',
							type: 'typeof default_sync_color_scheme',
							optional: true,
						},
						{
							name: 'load_color_scheme',
							type: 'typeof default_load_color_scheme',
							optional: true,
						},
						{
							name: 'save_color_scheme',
							type: 'typeof default_save_color_scheme',
							optional: true,
						},
						{
							name: 'load_theme',
							type: 'typeof default_load_theme',
							optional: true,
						},
						{
							name: 'save_theme',
							type: 'typeof default_save_theme',
							optional: true,
						},
						{
							name: 'theme_fallback',
							type: 'Theme | undefined',
							optional: true,
						},
						{
							name: 'themer',
							type: 'Themer',
							optional: true,
							description:
								"A reactive class containing the selected theme and color scheme.\nDefaults to the first default theme.\nThe class reference is not reactive\nbecause it's set in context without a wrapper, use `{#key theme}` if it changes.",
						},
						{
							name: 'children',
							type: 'Snippet<[themer: Themer, style: string | null, theme_style_html: string | null]>',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Tome_Content.svelte': {
			path: 'Tome_Content.svelte',
			declarations: [
				{
					name: 'Tome_Content',
					kind: 'component',
					props: [
						{
							name: 'tome',
							type: 'Tome',
							optional: false,
						},
						{
							name: 'docs_path',
							type: 'string',
							optional: true,
						},
						{
							name: 'header',
							type: 'Snippet',
							optional: true,
						},
						{
							name: 'children',
							type: 'Snippet',
							optional: false,
						},
					],
					source_line: 1,
				},
			],
		},
		'./Tome_Header.svelte': {
			path: 'Tome_Header.svelte',
			declarations: [
				{
					name: 'Tome_Header',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Tome_Link.svelte': {
			path: 'Tome_Link.svelte',
			declarations: [
				{
					name: 'Tome_Link',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Tome_Section.svelte': {
			path: 'Tome_Section.svelte',
			declarations: [
				{
					name: 'Tome_Section',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Tome_Section_Header.svelte': {
			path: 'Tome_Section_Header.svelte',
			declarations: [
				{
					name: 'Tome_Section_Header',
					kind: 'component',
					source_line: 1,
				},
			],
		},
		'./Tooltip.svelte': {
			path: 'Tooltip.svelte',
			declarations: [
				{
					name: 'Tooltip',
					kind: 'component',
					props: [
						{
							name: 'tooltip',
							type: 'Tooltip_State',
							optional: true,
							description: 'Optional tooltip state - defaults to context value',
						},
						{
							name: 'offset_x',
							type: 'number',
							optional: true,
							description: 'Horizontal offset from anchor point (cursor or element center)',
						},
						{
							name: 'offset_y',
							type: 'number',
							optional: true,
							description: 'Vertical offset from anchor point (cursor or element bottom)',
						},
						{
							name: 'viewport_padding',
							type: 'number',
							optional: true,
							description: 'Padding from viewport edges',
						},
					],
					source_line: 1,
				},
			],
		},
		'./alert.ts': {
			path: 'alert.ts',
			declarations: [
				{
					name: 'Alert_Status',
					kind: 'type',
					source_line: 3,
					type_signature: 'Alert_Status',
				},
				{
					name: 'Alert_Status_Options',
					kind: 'type',
					source_line: 5,
					type_signature: 'Alert_Status_Options',
					properties: [
						{
							name: 'color',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'icon',
							kind: 'variable',
							type_signature: 'string | null',
						},
					],
				},
				{
					name: 'alert_status_options',
					kind: 'variable',
					source_line: 10,
					type_signature: 'Record<Alert_Status, Alert_Status_Options>',
				},
			],
			module_comment: '// TODO move to module context?',
		},
		'./api_data.ts': {
			path: 'api_data.ts',
			declarations: [
				{
					name: 'lookup_declaration_by_name',
					kind: 'function',
					doc_comment: 'Look up a declaration by name (flat namespace)',
					summary: 'Look up a declaration by name (flat namespace)',
					source_line: 12,
					type_signature:
						'(name: string): { decl: Src_Module_Declaration; module_path: string; src_module: Src_Module; } | undefined',
					return_type:
						'{ decl: Src_Module_Declaration; module_path: string; src_module: Src_Module; } | undefined',
					parameters: [
						{
							name: 'name',
							type: 'string',
							optional: false,
						},
					],
				},
				{
					name: 'get_all_declarations',
					kind: 'function',
					doc_comment: 'Get all declarations as a flat list',
					summary: 'Get all declarations as a flat list',
					source_line: 33,
					type_signature:
						'(): { module_path: string; src_module: Src_Module; decl: Src_Module_Declaration; }[]',
					return_type:
						'{ module_path: string; src_module: Src_Module; decl: Src_Module_Declaration; }[]',
					parameters: [],
				},
				{
					name: 'is_known_identifier',
					kind: 'function',
					doc_comment: 'Check if an identifier is documented',
					summary: 'Check if an identifier is documented',
					source_line: 61,
					type_signature: '(name: string): boolean',
					return_type: 'boolean',
					parameters: [
						{
							name: 'name',
							type: 'string',
							optional: false,
						},
					],
				},
				{
					name: 'search_declarations',
					kind: 'function',
					doc_comment: 'Search declarations by name (fuzzy match)',
					summary: 'Search declarations by name (fuzzy match)',
					source_line: 68,
					type_signature:
						'(query: string): { module_path: string; src_module: Src_Module; decl: Src_Module_Declaration; }[]',
					return_type:
						'{ module_path: string; src_module: Src_Module; decl: Src_Module_Declaration; }[]',
					parameters: [
						{
							name: 'query',
							type: 'string',
							optional: false,
						},
					],
				},
			],
			module_comment:
				'API documentation data helpers\nFunctions for looking up and searching declarations',
		},
		'./constants.ts': {
			path: 'constants.ts',
			declarations: [
				{
					name: 'MAIN_HEADER_MARGIN_TOP',
					kind: 'variable',
					source_line: 3,
					type_signature: '"calc(60px + var(--space_lg))"',
				},
			],
			module_comment:
				'// TODO the 60px is a hack, need `--docs_primary_nav_height` exported or :root values from Fuz -- the --space_lg also needs to be kept in sync',
		},
		'./context_helpers.ts': {
			path: 'context_helpers.ts',
			declarations: [
				{
					name: 'create_context',
					kind: 'function',
					doc_comment:
						"Wraps Svelte's `setContext` and `getContext` for better ergonmics.\nWhen no value is set in the context,\n`get` throws an error and `maybe_get` returns `undefined`.\nIf a `fallback` is provided, the `value` argument to `set` is optional\nand `maybe_get` is omitted from the type.",
					summary:
						"Wraps Svelte's `setContext` and `getContext` for better ergonmics.\nWhen no value is set in the context,\n`get` throws an error and `maybe_get` returns `undefined`.\nIf a `fallback` is provided, the `value` argument to `set` is optional\nand `maybe_get` is omitted from the type.",
					source_line: 18,
					type_signature:
						'<T>(fallback: () => T): { get: () => T; set: (value?: T | undefined) => T; }',
					return_type: '{ get: () => T; set: (value?: T | undefined) => T; }',
					parameters: [
						{
							name: 'fallback',
							type: '() => T',
							optional: false,
						},
					],
					generic_params: [
						{
							name: 'T',
						},
					],
				},
			],
		},
		'./contextmenu_helpers.ts': {
			path: 'contextmenu_helpers.ts',
			declarations: [
				{
					name: 'CONTEXTMENU_DEFAULT_OPEN_OFFSET_X',
					kind: 'variable',
					source_line: 6,
					type_signature: '-2',
				},
				{
					name: 'CONTEXTMENU_DEFAULT_OPEN_OFFSET_Y',
					kind: 'variable',
					source_line: 7,
					type_signature: '-2',
				},
				{
					name: 'CONTEXTMENU_DEFAULT_BYPASS_WINDOW',
					kind: 'variable',
					source_line: 8,
					type_signature: '750',
				},
				{
					name: 'CONTEXTMENU_DEFAULT_BYPASS_MOVE_TOLERANCE',
					kind: 'variable',
					source_line: 9,
					type_signature: '11',
				},
				{
					name: 'CONTEXTMENU_DEFAULT_LONGPRESS_DURATION',
					kind: 'variable',
					source_line: 10,
					type_signature: '633',
				},
				{
					name: 'CONTEXTMENU_DEFAULT_LONGPRESS_MOVE_TOLERANCE',
					kind: 'variable',
					source_line: 11,
					type_signature: '21',
				},
				{
					name: 'contextmenu_is_valid_target',
					kind: 'function',
					doc_comment:
						'Check if a target element is valid for contextmenu interactions.\nReturns true if valid and narrows the type to HTMLElement | SVGElement.',
					summary:
						'Check if a target element is valid for contextmenu interactions.\nReturns true if valid and narrows the type to HTMLElement | SVGElement.',
					source_line: 17,
					type_signature:
						'(target: EventTarget | null, shiftKey: boolean): target is HTMLElement | SVGElement',
					return_type: 'boolean',
					parameters: [
						{
							name: 'target',
							type: 'EventTarget | null',
							optional: false,
						},
						{
							name: 'shiftKey',
							type: 'boolean',
							optional: false,
						},
					],
				},
				{
					name: 'contextmenu_create_keyboard_handlers',
					kind: 'function',
					doc_comment:
						'Creates the keyboard handler map for contextmenu navigation.\nBinds handlers to the provided contextmenu instance.',
					summary:
						'Creates the keyboard handler map for contextmenu navigation.\nBinds handlers to the provided contextmenu instance.',
					source_line: 32,
					type_signature: '(contextmenu: Contextmenu_State): Map<string, () => void>',
					return_type: 'Map<string, () => void>',
					parameters: [
						{
							name: 'contextmenu',
							type: 'Contextmenu_State',
							optional: false,
						},
					],
				},
				{
					name: 'contextmenu_create_keydown_handler',
					kind: 'function',
					doc_comment:
						'Creates a keydown event handler that uses the provided keyboard handlers map.',
					summary: 'Creates a keydown event handler that uses the provided keyboard handlers map.',
					source_line: 50,
					type_signature:
						'(keyboard_handlers: Map<string, () => void>): (e: KeyboardEvent) => void',
					return_type: '(e: KeyboardEvent) => void',
					parameters: [
						{
							name: 'keyboard_handlers',
							type: 'Map<string, () => void>',
							optional: false,
						},
					],
				},
				{
					name: 'contextmenu_calculate_constrained_x',
					kind: 'function',
					doc_comment:
						'Calculates the constrained X position for the contextmenu,\nensuring it stays within the layout width.',
					summary:
						'Calculates the constrained X position for the contextmenu,\nensuring it stays within the layout width.',
					source_line: 65,
					type_signature: '(menu_x: number, menu_width: number, layout_width: number): number',
					return_type: 'number',
					parameters: [
						{
							name: 'menu_x',
							type: 'number',
							optional: false,
						},
						{
							name: 'menu_width',
							type: 'number',
							optional: false,
						},
						{
							name: 'layout_width',
							type: 'number',
							optional: false,
						},
					],
				},
				{
					name: 'contextmenu_calculate_constrained_y',
					kind: 'function',
					doc_comment:
						'Calculates the constrained Y position for the contextmenu,\nensuring it stays within the layout height.',
					summary:
						'Calculates the constrained Y position for the contextmenu,\nensuring it stays within the layout height.',
					source_line: 75,
					type_signature: '(menu_y: number, menu_height: number, layout_height: number): number',
					return_type: 'number',
					parameters: [
						{
							name: 'menu_y',
							type: 'number',
							optional: false,
						},
						{
							name: 'menu_height',
							type: 'number',
							optional: false,
						},
						{
							name: 'layout_height',
							type: 'number',
							optional: false,
						},
					],
				},
			],
		},
		'./contextmenu_state.svelte.ts': {
			path: 'contextmenu_state.svelte.ts',
			declarations: [
				{
					name: 'Contextmenu_Params',
					kind: 'type',
					source_line: 14,
					type_signature: 'Contextmenu_Params',
				},
				{
					name: 'Contextmenu_Activate_Result',
					kind: 'type',
					source_line: 21,
					type_signature: 'Contextmenu_Activate_Result',
				},
				{
					name: 'Item_State',
					kind: 'type',
					source_line: 26,
					type_signature: 'Item_State',
				},
				{
					name: 'Entry_State',
					kind: 'class',
					source_line: 28,
					members: [
						{
							name: 'is_menu',
							kind: 'variable',
							summary: 'readonly',
						},
						{
							name: 'menu',
							kind: 'variable',
							summary: 'readonly',
							type_signature: 'Submenu_State | Root_Menu_State',
						},
						{
							name: 'run',
							kind: 'variable',
							summary: 'readonly',
							type_signature: '() => Contextmenu_Run',
						},
						{
							name: 'disabled',
							kind: 'variable',
							summary: 'readonly',
							type_signature: '() => boolean',
						},
						{
							name: 'selected',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'pending',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'error_message',
							kind: 'variable',
							type_signature: 'string | null',
						},
						{
							name: 'promise',
							kind: 'variable',
							type_signature: 'Promise<any> | null',
						},
					],
				},
				{
					name: 'Submenu_State',
					kind: 'class',
					source_line: 51,
					members: [
						{
							name: 'is_menu',
							kind: 'variable',
							summary: 'readonly',
						},
						{
							name: 'menu',
							kind: 'variable',
							summary: 'readonly',
							type_signature: 'Submenu_State | Root_Menu_State',
						},
						{
							name: 'depth',
							kind: 'variable',
							summary: 'readonly',
							type_signature: 'number',
						},
						{
							name: 'selected',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'items',
							kind: 'variable',
							type_signature: 'Array<Item_State>',
						},
					],
				},
				{
					name: 'Root_Menu_State',
					kind: 'class',
					source_line: 65,
					members: [
						{
							name: 'is_menu',
							kind: 'variable',
							summary: 'readonly',
						},
						{
							name: 'menu',
							kind: 'variable',
							summary: 'readonly',
						},
						{
							name: 'depth',
							kind: 'variable',
							summary: 'readonly',
						},
						{
							name: 'items',
							kind: 'variable',
							type_signature: 'Array<Item_State>',
						},
					],
				},
				{
					name: 'Contextmenu_Run',
					kind: 'type',
					source_line: 73,
					type_signature: 'Contextmenu_Run',
				},
				{
					name: 'Contextmenu_State_Options',
					kind: 'type',
					source_line: 77,
					type_signature: 'Contextmenu_State_Options',
					properties: [
						{
							name: 'layout',
							kind: 'variable',
							type_signature: 'Dimensions',
						},
					],
				},
				{
					name: 'Contextmenu_State',
					kind: 'class',
					doc_comment:
						'Creates a `contextmenu` store.\nSee usage with `Contextmenu_Root.svelte` and `Contextmenu.svelte`.',
					summary:
						'Creates a `contextmenu` store.\nSee usage with `Contextmenu_Root.svelte` and `Contextmenu.svelte`.',
					see_also: ['://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event'],
					source_line: 87,
					members: [
						{
							name: 'layout',
							kind: 'variable',
							type_signature: 'Dimensions',
						},
						{
							name: 'has_custom_layout',
							kind: 'variable',
							summary: 'readonly',
							type_signature: 'boolean',
							doc_comment:
								'If an initial layout is provided, control is deferred externally.\nOtherwise the layout syncs to the page dimensions.',
						},
						{
							name: 'opened',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'x',
							kind: 'variable',
							type_signature: 'number',
						},
						{
							name: 'y',
							kind: 'variable',
							type_signature: 'number',
						},
						{
							name: 'params',
							kind: 'variable',
							type_signature: 'Array<Contextmenu_Params>',
						},
						{
							name: 'error',
							kind: 'variable',
							type_signature: 'string | undefined',
						},
						{
							name: 'root_menu',
							kind: 'variable',
							summary: 'readonly',
							type_signature: 'Root_Menu_State',
						},
						{
							name: 'selections',
							kind: 'variable',
							type_signature: 'Array<Item_State>',
						},
						{
							name: 'can_collapse',
							kind: 'variable',
						},
						{
							name: 'can_expand',
							kind: 'variable',
						},
						{
							name: 'can_select_next',
							kind: 'variable',
						},
						{
							name: 'can_select_previous',
							kind: 'variable',
						},
						{
							name: 'can_activate',
							kind: 'variable',
						},
						{
							name: 'open',
							kind: 'function',
							type_signature: '(params: Contextmenu_Params[], x: number, y: number) => void',
						},
						{
							name: 'close',
							kind: 'function',
							type_signature: '() => void',
						},
						{
							name: 'reset_items',
							kind: 'function',
							type_signature: '(items: Item_State[]) => void',
						},
						{
							name: 'activate',
							kind: 'function',
							type_signature:
								'(item: Item_State) => boolean | Promise<Contextmenu_Activate_Result>',
						},
						{
							name: 'activate_selected',
							kind: 'function',
							type_signature: '() => boolean | void | Promise<Contextmenu_Activate_Result>',
						},
						{
							name: 'select',
							kind: 'function',
							type_signature: '(item: Item_State) => void',
							doc_comment: 'Activates the selected entry, or if none, selects the first.',
							summary: 'Activates the selected entry, or if none, selects the first.',
						},
						{
							name: 'collapse_selected',
							kind: 'function',
							type_signature: '() => void',
						},
						{
							name: 'expand_selected',
							kind: 'function',
							type_signature: '() => void',
						},
						{
							name: 'select_next',
							kind: 'function',
							type_signature: '() => void',
						},
						{
							name: 'select_previous',
							kind: 'function',
							type_signature: '() => void',
						},
						{
							name: 'select_first',
							kind: 'function',
							type_signature: '() => void',
						},
						{
							name: 'select_last',
							kind: 'function',
							type_signature: '() => void',
						},
						{
							name: 'add_entry',
							kind: 'function',
							type_signature:
								'(run: () => Contextmenu_Run, disabled?: () => boolean) => Entry_State',
							doc_comment: 'Used by `Contextmenu_Entry` and custom entry components',
							summary: 'Used by `Contextmenu_Entry` and custom entry components',
						},
						{
							name: 'add_submenu',
							kind: 'function',
							type_signature: '() => Submenu_State',
							doc_comment: '',
							summary: '',
						},
					],
				},
				{
					name: 'contextmenu_action',
					kind: 'function',
					source_line: 346,
					type_signature:
						'<T extends Contextmenu_Params, U extends T | Array<T>>(el: HTMLElement | SVGElement, params: U | null | undefined): ActionReturn<U, Record<never, any>> | undefined',
					return_type: 'ActionReturn<U, Record<never, any>> | undefined',
					parameters: [
						{
							name: 'el',
							type: 'HTMLElement | SVGElement',
							optional: false,
						},
						{
							name: 'params',
							type: 'U | null | undefined',
							optional: false,
						},
					],
				},
				{
					name: 'Open_Contextmenu_Options',
					kind: 'type',
					source_line: 366,
					type_signature: 'Open_Contextmenu_Options',
					properties: [
						{
							name: 'link_enabled',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'text_enabled',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'separator_enabled',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'vibrate',
							kind: 'variable',
							type_signature: 'boolean',
						},
					],
				},
				{
					name: 'open_contextmenu',
					kind: 'function',
					doc_comment:
						'Opens the contextmenu, if appropriate,\nquerying the menu items from the DOM starting at the event target.',
					summary:
						'Opens the contextmenu, if appropriate,\nquerying the menu items from the DOM starting at the event target.',
					source_line: 383,
					type_signature:
						'(target: HTMLElement | SVGElement, x: number, y: number, contextmenu: Contextmenu_State, options?: Open_Contextmenu_Options | undefined): boolean',
					return_type: 'boolean',
					return_description: 'a boolean indicating if the menu was opened or not',
					parameters: [
						{
							name: 'target',
							type: 'HTMLElement | SVGElement',
							optional: false,
							description: '- the leaf element from which to open the contextmenu',
						},
						{
							name: 'x',
							type: 'number',
							optional: false,
							description:
								'- the page X coordinate at which to open the contextmenu, typically the mouse `pageX`',
						},
						{
							name: 'y',
							type: 'number',
							optional: false,
							description:
								'- the page Y coordinate at which to open the contextmenu, typically the mouse `pageY`',
						},
						{
							name: 'contextmenu',
							type: 'Contextmenu_State',
							optional: false,
							description: '- the contextmenu store',
						},
						{
							name: 'options',
							type: 'Open_Contextmenu_Options | undefined',
							optional: true,
							description: '- optional configuration for filtering entries and haptic feedback',
						},
					],
				},
				{
					name: 'contextmenu_context',
					kind: 'variable',
					source_line: 469,
					type_signature:
						'{ get: (error_message?: string | undefined) => Contextmenu_State; maybe_get: () => Contextmenu_State | undefined; set: (value: Contextmenu_State) => Contextmenu_State; }',
				},
				{
					name: 'contextmenu_submenu_context',
					kind: 'variable',
					source_line: 471,
					type_signature:
						'{ get: (error_message?: string | undefined) => Submenu_State; maybe_get: () => Submenu_State | undefined; set: (value: Submenu_State) => Submenu_State; }',
				},
				{
					name: 'contextmenu_dimensions_context',
					kind: 'variable',
					source_line: 473,
					type_signature:
						'{ get: () => Dimensions; set: (value?: Dimensions | undefined) => Dimensions; }',
				},
				{
					name: 'contextmenu_check_global_root',
					kind: 'function',
					doc_comment:
						'Registers a contextmenu root and warns if multiple non-scoped roots are detected.\nOnly active in development mode. Automatically handles cleanup on unmount.',
					summary:
						'Registers a contextmenu root and warns if multiple non-scoped roots are detected.\nOnly active in development mode. Automatically handles cleanup on unmount.',
					source_line: 484,
					type_signature: '(get_scoped: () => boolean): void',
					return_type: 'void',
					parameters: [
						{
							name: 'get_scoped',
							type: '() => boolean',
							optional: false,
							description: '- Getter function that returns the current scoped value',
						},
					],
				},
			],
		},
		'./csp.ts': {
			path: 'csp.ts',
			declarations: [
				{
					name: 'create_csp_directives',
					kind: 'function',
					doc_comment:
						"This is designed for compatibility with SvelteKit\nand maps to the `KitConfig` `directives` option.\nThe goal is to provide an ergonomic, modern, and safe API\nfor Content Security Policy (CSP) creation\nthat's simple to write and audit, and isn't error-prone.\n\nThings like validation and rendering to a string\nare out of scope and left to SvelteKit.",
					summary:
						"This is designed for compatibility with SvelteKit\nand maps to the `KitConfig` `directives` option.\nThe goal is to provide an ergonomic, modern, and safe API\nfor Content Security Policy (CSP) creation\nthat's simple to write and audit, and isn't error-prone.",
					source_line: 60,
					type_signature: '(options?: Create_Csp_Directives_Options): Csp_Directives',
					return_type: 'Csp_Directives',
					parameters: [
						{
							name: 'options',
							type: 'Create_Csp_Directives_Options',
							optional: false,
							default_value: '{}',
						},
					],
				},
				{
					name: 'Create_Csp_Directives_Options',
					kind: 'type',
					source_line: 5,
					type_signature: 'Create_Csp_Directives_Options',
					properties: [
						{
							name: 'directives',
							kind: 'variable',
							type_signature:
								'{\n\t\t[K in Csp_Directive]?:\n\t\t\t| Csp_Directive_Value<K> // Static value replacement\n\t\t\t| null // Removes the directive\n\t\t\t// Transform function returning one of the previous types\n\t\t\t| ((value: Csp_Directive_Value<K>) => Csp_Directive_Value<K> | null);\n\t}',
							doc_comment:
								'Override or transform specific directives.\nReturning `null` or `undefined` from a transform function will remove the directive.',
							summary:
								'Override or transform specific directives.\nReturning `null` or `undefined` from a transform function will remove the directive.',
						},
						{
							name: 'trusted_sources',
							kind: 'variable',
							type_signature: 'Array<Csp_Source_Spec>',
							doc_comment: 'Sources to include based on their trust levels.',
							summary: 'Sources to include based on their trust levels.',
						},
						{
							name: 'value_defaults',
							kind: 'variable',
							type_signature: 'Partial<typeof csp_directive_value_defaults>',
							doc_comment:
								'Override default values for specific directives,\nmerging with `value_defaults_base` (or replacing if that directive is null in the base).',
							summary:
								'Override default values for specific directives,\nmerging with `value_defaults_base` (or replacing if that directive is null in the base).',
						},
						{
							name: 'value_defaults_base',
							kind: 'variable',
							type_signature: 'Partial<typeof csp_directive_value_defaults> | null',
							doc_comment:
								'Base values for directive defaults.\nSet to `null` or `{}` to start with no defaults.\nDefaults to `csp_directive_value_defaults`.',
							summary:
								'Base values for directive defaults.\nSet to `null` or `{}` to start with no defaults.\nDefaults to `csp_directive_value_defaults`.',
						},
						{
							name: 'required_trust_defaults',
							kind: 'variable',
							type_signature: 'Partial<typeof csp_directive_required_trust_defaults>',
							doc_comment:
								'Override trust requirements for specific directives,\nmerging with `required_trust_defaults_base` (or replacing if that directive is null in the base).',
							summary:
								'Override trust requirements for specific directives,\nmerging with `required_trust_defaults_base` (or replacing if that directive is null in the base).',
						},
						{
							name: 'required_trust_defaults_base',
							kind: 'variable',
							type_signature: 'Partial<typeof csp_directive_required_trust_defaults> | null',
							doc_comment:
								'Base values for directive trust requirements.\nSet to `null` or `{}` to start with no trust requirements.\nDefaults to `csp_directive_required_trust_defaults`.',
							summary:
								'Base values for directive trust requirements.\nSet to `null` or `{}` to start with no trust requirements.\nDefaults to `csp_directive_required_trust_defaults`.',
						},
					],
				},
				{
					name: 'Csp_Directive',
					kind: 'type',
					source_line: 175,
					type_signature: 'keyof Csp_Directives',
				},
				{
					name: 'parse_csp_directive',
					kind: 'function',
					source_line: 177,
					type_signature: '(directive: unknown): keyof Csp_Directives | null',
					return_type: 'keyof Csp_Directives | null',
					parameters: [
						{
							name: 'directive',
							type: 'unknown',
							optional: false,
						},
					],
				},
				{
					name: 'Csp_Directive_Value',
					kind: 'type',
					source_line: 182,
					type_signature: 'Csp_Directive_Value<T>',
					generic_params: [
						{
							name: 'T',
							constraint: 'Csp_Directive',
						},
					],
				},
				{
					name: 'csp_trust_levels',
					kind: 'variable',
					source_line: 184,
					type_signature: 'readonly ["low", "medium", "high"]',
				},
				{
					name: 'csp_trust_level_value',
					kind: 'variable',
					doc_comment:
						'Numeric values for CSP trust levels, `csp_trust_levels`.\nLower is less trusted.\nIncludes `undefined` in the type for safety.',
					summary:
						'Numeric values for CSP trust levels, `csp_trust_levels`.\nLower is less trusted.\nIncludes `undefined` in the type for safety.',
					source_line: 191,
					type_signature: 'Record<"low" | "medium" | "high", number | undefined>',
				},
				{
					name: 'Csp_Trust_Level',
					kind: 'type',
					doc_comment:
						"Trust levels for CSP sources.\n\nWith the base defaults, trust levels roughly correspond to:\n\n- `low` â€“ Passive resources only (no script execution, no styling or UI control).\n\t\tExamples: `img-src`, `font-src`.\n- `medium` â€“ Content that may affect layout, styling, or embed external browsing contexts,\n   but cannot directly run code in the page's JS execution environment or\n\t\tperform other high-risk actions. Examples: `style-src`, `frame-src`, `frame-ancestors`.\n- `high` â€“ Sources that can execute code in the page's context or open powerful network\n   channels. Examples: `script-src`, `connect-src`, `child-src`.\n- `null` â€“ No trust. This is used for directives that don't support sources.",
					summary: 'Trust levels for CSP sources.',
					source_line: 212,
					type_signature: '"low" | "medium" | "high"',
				},
				{
					name: 'parse_csp_trust_level',
					kind: 'function',
					doc_comment: 'Validates and extracts a CSP trust level from an unknown value.',
					summary: 'Validates and extracts a CSP trust level from an unknown value.',
					source_line: 217,
					type_signature: '(trust: unknown): "low" | "medium" | "high" | null',
					return_type: '"low" | "medium" | "high" | null',
					parameters: [
						{
							name: 'trust',
							type: 'unknown',
							optional: false,
						},
					],
				},
				{
					name: 'Csp_Source_Spec',
					kind: 'type',
					source_line: 220,
					type_signature: 'Csp_Source_Spec',
					properties: [
						{
							name: 'source',
							kind: 'variable',
							type_signature: 'Csp_Source',
						},
						{
							name: 'trust',
							kind: 'variable',
							type_signature: 'Csp_Trust_Level',
						},
						{
							name: 'directives',
							kind: 'variable',
							type_signature: 'Array<Csp_Directive>',
						},
					],
				},
				{
					name: 'Csp_Directive_Spec',
					kind: 'type',
					source_line: 226,
					type_signature: 'Csp_Directive_Spec',
					properties: [
						{
							name: 'name',
							kind: 'variable',
							type_signature: 'Csp_Directive',
						},
						{
							name: 'fallback',
							kind: 'variable',
							type_signature: 'Array<Csp_Directive> | null',
						},
						{
							name: 'fallback_of',
							kind: 'variable',
							type_signature: 'Array<Csp_Directive> | null',
						},
					],
				},
				{
					name: 'is_csp_trusted',
					kind: 'function',
					doc_comment:
						"Determines if a granted trust level is sufficient to satisfy a required trust level.\n\nTrust levels have the following hierarchy:\n- 'high' sources can be used in high, medium, and low trust directives (highest privilege)\n- 'medium' sources can be used in medium and low trust directives\n- 'low' sources can only be used in low trust directives (lowest privilege)",
					summary:
						'Determines if a granted trust level is sufficient to satisfy a required trust level.',
					source_line: 240,
					type_signature:
						'(required_trust: "low" | "medium" | "high" | null | undefined, granted_trust: "low" | "medium" | "high" | null | undefined): boolean',
					return_type: 'boolean',
					parameters: [
						{
							name: 'required_trust',
							type: '"low" | "medium" | "high" | null | undefined',
							optional: false,
						},
						{
							name: 'granted_trust',
							type: '"low" | "medium" | "high" | null | undefined',
							optional: false,
						},
					],
				},
				{
					name: 'COLOR_SCHEME_SCRIPT_HASH',
					kind: 'variable',
					source_line: 263,
					type_signature: '"sha256-QOxqn7EUzb3ydF9SALJoJGWSvywW9R0AfTDSenB83Z8="',
				},
				{
					name: 'csp_directive_value_defaults',
					kind: 'variable',
					doc_comment:
						'The base CSP directive defaults.\nPrioritizes safety but loosens around media and styles, relying on defense-in-depth.\nCustomizable via `Create_Csp_Directives_Options.defaults`.',
					summary:
						'The base CSP directive defaults.\nPrioritizes safety but loosens around media and styles, relying on defense-in-depth.\nCustomizable via `Create_Csp_Directives_Options.defaults`.',
					source_line: 270,
					type_signature:
						'Record<keyof Csp_Directives, boolean | (Csp_Source | Csp_Action_Source)[] | Csp_Sources | (`${string}.${string}` | "localhost" | ... 17 more ... | "none")[] | string[] | "script"[] | ("allow-downloads-without-user-activation" | ... 11 more ... | "allow-top-navigation-by-user-activation")[] | null>',
				},
				{
					name: 'csp_directive_required_trust_defaults',
					kind: 'variable',
					doc_comment:
						"Sources that meet this trust requirement are included for it by default.\nIf null, no trusted sources are added to the directive automatically.\nDirectives that don't support sources or default to `['none']` are null.\n\nFeedback is welcome, please see the issues - https://github.com/ryanatkn/fuz/issues",
					summary:
						"Sources that meet this trust requirement are included for it by default.\nIf null, no trusted sources are added to the directive automatically.\nDirectives that don't support sources or default to `['none']` are null.",
					source_line: 307,
					type_signature: 'Record<keyof Csp_Directives, "low" | "medium" | "high" | null>',
				},
				{
					name: 'csp_directive_specs',
					kind: 'variable',
					doc_comment:
						'Static data descriptors for the CSP directives.\nFuz excludes deprecated directives, so those are intentionally omitted,\nbut any newer missing directives are bugs.\n\nCould be moved to `csp.ts` but is currently here to keep that module smaller.',
					summary:
						'Static data descriptors for the CSP directives.\nFuz excludes deprecated directives, so those are intentionally omitted,\nbut any newer missing directives are bugs.',
					see_also: [
						'://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy',
					],
					source_line: 344,
					type_signature: 'Csp_Directive_Spec[]',
				},
				{
					name: 'csp_directive_spec_by_name',
					kind: 'variable',
					source_line: 482,
					type_signature: 'Map<keyof Csp_Directives, Csp_Directive_Spec>',
				},
				{
					name: 'Csp_Action_Source',
					kind: 'type',
					source_line: 514,
					type_signature: 'Csp_Action_Source',
				},
				{
					name: 'Csp_Base_Source',
					kind: 'type',
					source_line: 515,
					type_signature: 'Csp_Base_Source',
				},
				{
					name: 'Csp_Crypto_Source',
					kind: 'type',
					source_line: 522,
					type_signature:
						'`nonce-${string}` | `sha256-${string}` | `sha384-${string}` | `sha512-${string}`',
				},
				{
					name: 'Csp_Frame_Source',
					kind: 'type',
					source_line: 523,
					type_signature: 'Csp_Frame_Source',
				},
				{
					name: 'Csp_Host_Name_Scheme',
					kind: 'type',
					source_line: 524,
					type_signature: 'Csp_Host_Name_Scheme',
				},
				{
					name: 'Csp_Host_Source',
					kind: 'type',
					source_line: 525,
					type_signature:
						'`${string}.${string}` | "localhost" | `${string}.${string}:${number}` | `${string}.${string}:*` | `localhost:${number}` | "localhost:*" | `${string}://${string}.${string}` | `${string}://${string}.${string}:${number}` | `${string}://${string}.${string}:*` | `${string}://localhost` | `${string}://localhost:${number}`...',
				},
				{
					name: 'Csp_Host_Protocol_Schemes',
					kind: 'type',
					source_line: 527,
					type_signature: 'Csp_Host_Protocol_Schemes',
				},
				{
					name: 'Csp_Port_Scheme',
					kind: 'type',
					source_line: 528,
					type_signature: 'Csp_Port_Scheme',
				},
				{
					name: 'Csp_Scheme_Source',
					kind: 'type',
					source_line: 529,
					type_signature: 'Csp_Scheme_Source',
				},
				{
					name: 'Csp_Source',
					kind: 'type',
					source_line: 536,
					type_signature: 'Csp_Source',
				},
				{
					name: 'Csp_Sources',
					kind: 'type',
					source_line: 537,
					type_signature: 'Csp_Sources',
				},
				{
					name: 'Csp_Directives',
					kind: 'type',
					source_line: 539,
					type_signature: 'Csp_Directives',
					properties: [
						{
							name: 'sandbox',
							kind: 'variable',
							type_signature:
								"Array<\n\t\t| 'allow-downloads-without-user-activation'\n\t\t| 'allow-forms'\n\t\t| 'allow-modals'\n\t\t| 'allow-orientation-lock'\n\t\t| 'allow-pointer-lock'\n\t\t| 'allow-popups'\n\t\t| 'allow-popups-to-escape-sandbox'\n\t\t| 'allow-presentation'\n\t\t| 'allow-same-origin'\n\t\t| 'allow-scripts'\n\t\t| 'allow-storage-access-by-user-activation'\n\t\t| 'allow-top-navigation'\n\t\t| 'allow-top-navigation-by-user-activation'\n\t>",
						},
					],
				},
			],
		},
		'./csp_of_ryanatkn.ts': {
			path: 'csp_of_ryanatkn.ts',
			declarations: [
				{
					name: 'csp_trusted_sources_of_ryanatkn',
					kind: 'variable',
					doc_comment: 'List of trusted sources owned by ryanatkn (me, ryanatkn.com).',
					summary: 'List of trusted sources owned by ryanatkn (me, ryanatkn.com).',
					source_line: 6,
					type_signature: 'Csp_Source_Spec[]',
				},
			],
		},
		'./declaration_contextmenu.ts': {
			path: 'declaration_contextmenu.ts',
			declarations: [
				{
					name: 'create_declaration_contextmenu',
					kind: 'function',
					doc_comment: 'Create contextmenu entries for a declaration',
					summary: 'Create contextmenu entries for a declaration',
					source_line: 8,
					type_signature:
						'(decl: Src_Module_Declaration, module_path: string, pkg_name: string, repo_url?: string | undefined, homepage_url?: string | null | undefined): Contextmenu_Params[]',
					return_type: 'Contextmenu_Params[]',
					parameters: [
						{
							name: 'decl',
							type: 'Src_Module_Declaration',
							optional: false,
						},
						{
							name: 'module_path',
							type: 'string',
							optional: false,
						},
						{
							name: 'pkg_name',
							type: 'string',
							optional: false,
						},
						{
							name: 'repo_url',
							type: 'string | undefined',
							optional: true,
						},
						{
							name: 'homepage_url',
							type: 'string | null | undefined',
							optional: true,
						},
					],
				},
			],
		},
		'./dialog.ts': {
			path: 'dialog.ts',
			declarations: [
				{
					name: 'to_dialog_params',
					kind: 'function',
					doc_comment:
						"This helper function is needed to construct `Dialog_Params` with type safety.\nIt uses TypeScript's inferred generics for functions,\nwhich do not work for plain objects as of v5.0.4.\n* `ContextmenuParams` uses a similar strategy.",
					summary:
						"This helper function is needed to construct `Dialog_Params` with type safety.\nIt uses TypeScript's inferred generics for functions,\nwhich do not work for plain objects as of v5.0.4.\n* `ContextmenuParams` uses a similar strategy.",
					source_line: 11,
					type_signature:
						'<T extends Component<any>>(Component: T, props: ComponentProps<T>, dialog_props?: Partial<Record<string, any>> | undefined): Dialog_Params<T>',
					return_type: 'Dialog_Params<T>',
					parameters: [
						{
							name: 'Component',
							type: 'T',
							optional: false,
						},
						{
							name: 'props',
							type: 'ComponentProps<T>',
							optional: false,
						},
						{
							name: 'dialog_props',
							type: 'Partial<Record<string, any>> | undefined',
							optional: true,
						},
					],
				},
				{
					name: 'Dialog_Params',
					kind: 'type',
					doc_comment:
						'This pattern is based on:\nhttps://github.com/ivanhofer/sveltekit-typescript-showcase/blob/main/src/01-props/09-svelte-component/Component.svelte\nThe main limitation is that the generic cannot be inferred automatically,\nso we use `to_dialog_params` to construct instances in most cases.\nDefinining `Dialog_Params` with no concrete `T` lacks typechecking for `props`.',
					summary:
						'This pattern is based on:\nhttps://github.com/ivanhofer/sveltekit-typescript-showcase/blob/main/src/01-props/09-svelte-component/Component.svelte\nThe main limitation is that the generic cannot be inferred automatically,\nso we use `to_dialog_params` to construct instances in most cases.\nDefinining `Dialog_Params` with no concrete `T` lacks typechecking for `props`.',
					source_line: 28,
					type_signature: 'Dialog_Params<T>',
					generic_params: [
						{
							name: 'T',
							constraint: 'Component<any>',
							default_type: 'Component<any>',
						},
					],
					properties: [
						{
							name: 'Component',
							kind: 'variable',
							type_signature: 'T',
						},
						{
							name: 'props',
							kind: 'variable',
							type_signature: 'ComponentProps<T>',
						},
						{
							name: 'dialog_props',
							kind: 'variable',
							type_signature: 'Partial<ComponentProps<typeof Dialog>> | undefined',
						},
					],
				},
				{
					name: 'Dialog_Layout',
					kind: 'type',
					source_line: 34,
					type_signature: 'Dialog_Layout',
				},
				{
					name: 'dialog_layouts',
					kind: 'variable',
					source_line: 35,
					type_signature: 'Dialog_Layout[]',
				},
			],
		},
		'./dimensions.svelte.ts': {
			path: 'dimensions.svelte.ts',
			declarations: [
				{
					name: 'Dimensions',
					kind: 'class',
					source_line: 1,
					members: [
						{
							name: 'width',
							kind: 'variable',
							type_signature: 'number',
						},
						{
							name: 'height',
							kind: 'variable',
							type_signature: 'number',
						},
					],
				},
			],
		},
		'./docs_helpers.svelte.ts': {
			path: 'docs_helpers.svelte.ts',
			declarations: [
				{
					name: 'DEFAULT_LIBRARY_PATH',
					kind: 'variable',
					source_line: 7,
					type_signature: '"/docs"',
				},
				{
					name: 'get_next_docs_link_order',
					kind: 'function',
					source_line: 12,
					type_signature: '(): number',
					return_type: 'number',
					parameters: [],
				},
				{
					name: 'reset_docs_link_order',
					kind: 'function',
					source_line: 15,
					type_signature: '(): void',
					return_type: 'void',
					parameters: [],
				},
				{
					name: 'to_docs_path_info',
					kind: 'function',
					source_line: 19,
					type_signature:
						'(slug: string, pathname: string, root_path?: string): { path: string; path_is_selected: boolean; path_segment: string | undefined; }',
					return_type:
						'{ path: string; path_is_selected: boolean; path_segment: string | undefined; }',
					parameters: [
						{
							name: 'slug',
							type: 'string',
							optional: false,
						},
						{
							name: 'pathname',
							type: 'string',
							optional: false,
						},
						{
							name: 'root_path',
							type: 'string',
							optional: false,
							default_value: 'DEFAULT_LIBRARY_PATH',
						},
					],
				},
				{
					name: 'docs_links_context',
					kind: 'variable',
					source_line: 30,
					type_signature:
						'{ get: () => Docs_Links; set: (value?: Docs_Links | undefined) => Docs_Links; }',
				},
				{
					name: 'Docs_Link_Tag',
					kind: 'type',
					source_line: 32,
					type_signature: 'Docs_Link_Tag',
				},
				{
					name: 'Docs_Link',
					kind: 'type',
					source_line: 34,
					type_signature: 'Docs_Link',
					properties: [
						{
							name: 'id',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'text',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'slug',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'tag',
							kind: 'variable',
							type_signature: 'Docs_Link_Tag | undefined',
						},
						{
							name: 'order',
							kind: 'variable',
							type_signature: 'number',
						},
					],
				},
				{
					name: 'Docs_Links',
					kind: 'class',
					source_line: 42,
					members: [
						{
							name: 'root_path',
							kind: 'variable',
							summary: 'readonly',
							type_signature: 'string',
						},
						{
							name: 'links',
							kind: 'variable',
							summary: 'readonly',
							type_signature: 'SvelteMap<string, Docs_Link>',
						},
						{
							name: '#slug_to_order',
							kind: 'variable',
							type_signature: 'Map<string, number>',
						},
						{
							name: '#next_id',
							kind: 'variable',
						},
						{
							name: 'docs_links',
							kind: 'variable',
						},
						{
							name: 'slugs_onscreen',
							kind: 'variable',
							summary: 'readonly',
							type_signature: 'SvelteSet<string>',
						},
						{
							name: 'add',
							kind: 'function',
							type_signature:
								'(slug: string, text: string, pathname: string, tag?: Docs_Link_Tag | undefined) => string',
						},
						{
							name: 'remove',
							kind: 'function',
							type_signature: '(id: string) => void',
						},
					],
				},
			],
		},
		'./helpers.ts': {
			path: 'helpers.ts',
			declarations: [
				{
					name: 'render_value_to_string',
					kind: 'function',
					doc_comment: 'Renders any value to a string representation',
					summary: 'Renders any value to a string representation',
					source_line: 7,
					type_signature: '(value: unknown): string',
					return_type: 'string',
					return_description: 'A string representation of the value',
					parameters: [
						{
							name: 'value',
							type: 'unknown',
							optional: false,
							description: 'Any JS value to stringify',
						},
					],
				},
			],
			module_comment:
				'Renders any value to a string representation\n\n@param value Any JS value to stringify\n@returns A string representation of the value',
		},
		'./intersect.ts': {
			path: 'intersect.ts',
			declarations: [
				{
					name: 'Intersect_Params',
					kind: 'type',
					source_line: 3,
					type_signature: 'Intersect_Params',
					properties: [
						{
							name: 'onintersect',
							kind: 'variable',
							type_signature: 'On_Intersect',
							doc_comment:
								'Called when the element enters or leaves the viewport until disconnected.',
							summary: 'Called when the element enters or leaves the viewport until disconnected.',
						},
						{
							name: 'ondisconnect',
							kind: 'variable',
							type_signature: 'On_Disconnect',
							doc_comment:
								"Called when the action's observer is disconnected,\neither by the user calling disconnect or the action being destroyed.",
							summary:
								"Called when the action's observer is disconnected,\neither by the user calling disconnect or the action being destroyed.",
						},
						{
							name: 'count',
							kind: 'variable',
							type_signature: 'number',
							doc_comment:
								"A value of `1` disconnects after `el` enters and leaves the viewport one time,\nsimilar to 'once' for an event.\n`0` disables and `undefined` or a negative number like `-1` never disconnects.",
							summary:
								"A value of `1` disconnects after `el` enters and leaves the viewport one time,\nsimilar to 'once' for an event.\n`0` disables and `undefined` or a negative number like `-1` never disconnects.",
						},
						{
							name: 'options',
							kind: 'variable',
							type_signature: 'IntersectionObserverInit',
							doc_comment:
								'Same as the `options` param to\n[`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver#options)',
							summary:
								'Same as the `options` param to\n[`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver#options)',
						},
					],
				},
				{
					name: 'Intersect_Params_Or_Callback',
					kind: 'type',
					source_line: 26,
					type_signature: 'Intersect_Params_Or_Callback',
				},
				{
					name: 'intersect',
					kind: 'function',
					source_line: 29,
					type_signature:
						'<Node extends HTMLElement | SVGElement>(node: Node, parameter: Intersect_Params_Or_Callback | null): void | ActionReturn<Intersect_Params_Or_Callback | null, Record<...>>',
					return_type:
						'void | ActionReturn<Intersect_Params_Or_Callback | null, Record<never, any>>',
					parameters: [
						{
							name: 'args',
							type: '[node: Node, parameter: Intersect_Params_Or_Callback | null]',
							optional: false,
						},
					],
				},
				{
					name: 'On_Intersect',
					kind: 'type',
					source_line: 101,
					type_signature: 'On_Intersect',
				},
				{
					name: 'Intersect_State',
					kind: 'type',
					source_line: 103,
					type_signature: 'Intersect_State',
					properties: [
						{
							name: 'intersecting',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'intersections',
							kind: 'variable',
							type_signature: 'number',
						},
						{
							name: 'el',
							kind: 'variable',
							type_signature: 'HTMLElement | SVGElement',
						},
						{
							name: 'observer',
							kind: 'variable',
							type_signature: 'IntersectionObserver',
						},
						{
							name: 'disconnect',
							kind: 'variable',
							type_signature: '() => void',
						},
					],
				},
				{
					name: 'On_Disconnect',
					kind: 'type',
					source_line: 112,
					type_signature: 'On_Disconnect',
				},
				{
					name: 'Disconnect_State',
					kind: 'type',
					source_line: 114,
					type_signature: 'Disconnect_State',
					properties: [
						{
							name: 'intersecting',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'intersections',
							kind: 'variable',
							type_signature: 'number',
						},
						{
							name: 'el',
							kind: 'variable',
							type_signature: 'HTMLElement | SVGElement',
						},
						{
							name: 'observer',
							kind: 'variable',
							type_signature: 'IntersectionObserver',
						},
					],
				},
			],
		},
		'./logos.ts': {
			path: 'logos.ts',
			declarations: [
				{
					name: 'zzz_logo',
					kind: 'variable',
					source_line: 22,
					type_signature: 'Svg_Data',
				},
				{
					name: 'gro_logo',
					kind: 'variable',
					source_line: 38,
					type_signature: 'Svg_Data',
				},
				{
					name: 'fuz_logo',
					kind: 'variable',
					source_line: 72,
					type_signature: 'Svg_Data',
				},
				{
					name: 'moss_logo',
					kind: 'variable',
					source_line: 82,
					type_signature: 'Svg_Data',
				},
				{
					name: 'belt_logo',
					kind: 'variable',
					source_line: 89,
					type_signature: 'Svg_Data',
				},
				{
					name: 'fuz_code_logo',
					kind: 'variable',
					source_line: 115,
					type_signature: 'Svg_Data',
				},
				{
					name: 'fuz_blog_logo',
					kind: 'variable',
					source_line: 121,
					type_signature: 'Svg_Data',
				},
				{
					name: 'fuz_mastodon_logo',
					kind: 'variable',
					source_line: 127,
					type_signature: 'Svg_Data',
				},
				{
					name: 'fuz_gitops_logo',
					kind: 'variable',
					source_line: 133,
					type_signature: 'Svg_Data',
				},
				{
					name: 'fuz_template_logo',
					kind: 'variable',
					source_line: 139,
					type_signature: 'Svg_Data',
				},
				{
					name: 'webdevladder_logo',
					kind: 'variable',
					source_line: 149,
					type_signature: 'Svg_Data',
				},
				{
					name: 'earbetter_logo',
					kind: 'variable',
					source_line: 165,
					type_signature: 'Svg_Data',
				},
				{
					name: 'spiderspace_logo',
					kind: 'variable',
					source_line: 175,
					type_signature: 'Svg_Data',
				},
				{
					name: 'github_logo',
					kind: 'variable',
					source_line: 237,
					type_signature: 'Svg_Data',
				},
				{
					name: 'mdn_logo',
					kind: 'variable',
					source_line: 250,
					type_signature: 'Svg_Data',
				},
				{
					name: 'chatgpt_logo',
					kind: 'variable',
					source_line: 260,
					type_signature: 'Svg_Data',
				},
				{
					name: 'claude_logo',
					kind: 'variable',
					source_line: 269,
					type_signature: 'Svg_Data',
				},
				{
					name: 'gemini_logo',
					kind: 'variable',
					source_line: 279,
					type_signature: 'Svg_Data',
				},
			],
		},
		'./module_helpers.ts': {
			path: 'module_helpers.ts',
			declarations: [
				{
					name: 'module_extract_path',
					kind: 'function',
					doc_comment: 'Extract module path relative to src/lib from absolute source ID.',
					summary: 'Extract module path relative to src/lib from absolute source ID.',
					examples: [
						"module_extract_path('/home/user/project/src/lib/foo.ts') // => 'foo.ts'\nmodule_extract_path('/home/user/project/src/lib/nested/bar.svelte') // => 'nested/bar.svelte'",
					],
					source_line: 17,
					type_signature: '(source_id: string): string',
					return_type: 'string',
					parameters: [
						{
							name: 'source_id',
							type: 'string',
							optional: false,
						},
					],
				},
				{
					name: 'module_get_component_name',
					kind: 'function',
					doc_comment: 'Extract component name from a Svelte module path.',
					summary: 'Extract component name from a Svelte module path.',
					examples: [
						"module_get_component_name('Alert.svelte') // => 'Alert'\nmodule_get_component_name('components/Button.svelte') // => 'Button'",
					],
					source_line: 29,
					type_signature: '(module_path: string): string',
					return_type: 'string',
					parameters: [
						{
							name: 'module_path',
							type: 'string',
							optional: false,
						},
					],
				},
				{
					name: 'module_get_key',
					kind: 'function',
					doc_comment: 'Convert module path to module key format (with ./ prefix).',
					summary: 'Convert module path to module key format (with ./ prefix).',
					examples: ["module_get_key('foo.ts') // => './foo.ts'"],
					source_line: 38,
					type_signature: '(module_path: string): string',
					return_type: 'string',
					parameters: [
						{
							name: 'module_path',
							type: 'string',
							optional: false,
						},
					],
				},
				{
					name: 'module_is_typescript',
					kind: 'function',
					doc_comment: 'Check if path is a TypeScript or JS file.',
					summary: 'Check if path is a TypeScript or JS file.',
					source_line: 43,
					type_signature: '(path: string): boolean',
					return_type: 'boolean',
					parameters: [
						{
							name: 'path',
							type: 'string',
							optional: false,
						},
					],
				},
				{
					name: 'module_is_svelte',
					kind: 'function',
					source_line: 46,
					type_signature: '(path: string): boolean',
					return_type: 'boolean',
					parameters: [
						{
							name: 'path',
							type: 'string',
							optional: false,
						},
					],
				},
				{
					name: 'module_is_test',
					kind: 'function',
					source_line: 48,
					type_signature: '(path: string): boolean',
					return_type: 'boolean',
					parameters: [
						{
							name: 'path',
							type: 'string',
							optional: false,
						},
					],
				},
				{
					name: 'module_is_source',
					kind: 'function',
					doc_comment: 'Check if ID is a source file in /src/lib/ (excluding tests).',
					summary: 'Check if ID is a source file in /src/lib/ (excluding tests).',
					source_line: 53,
					type_signature: '(id: string): boolean',
					return_type: 'boolean',
					parameters: [
						{
							name: 'id',
							type: 'string',
							optional: false,
						},
					],
				},
			],
			module_comment:
				'Module path and metadata helpers.\n\nProvides utilities for working with source module paths, file types,\nand import relationships in the package generation system.\n\nAll functions are prefixed with `module_` for clarity.',
		},
		'./package.gen.ts': {
			path: 'package.gen.ts',
			declarations: [
				{
					name: 'gen',
					kind: 'function',
					source_line: 50,
				},
			],
			module_comment:
				'Custom package generator with full TypeScript analysis\n\nGenerates package.json and src.json with rich metadata:\n- JSDoc/TSDoc comments with full tag support\n- Full type signatures\n- Source code locations\n- Parameter information with descriptions and defaults\n- Return value documentation\n- Usage examples\n- Dependency graphs\n- Svelte component props\n\n@see src/lib/src_json.ts for type definitions\n@see src/lib/tsdoc_helpers.ts for JSDoc/TSDoc parsing\n@see src/lib/ts_helpers.ts for TypeScript analysis\n@see src/lib/svelte_helpers.ts for Svelte component analysis',
		},
		'./package.ts': {
			path: 'package.ts',
			declarations: [
				{
					name: 'package_json',
					kind: 'variable',
					source_line: 7,
					type_signature:
						'{ [x: string]: unknown; name: string; version: string; private?: boolean | undefined; public?: boolean | undefined; description?: string | undefined; motto?: string | undefined; glyph?: string | undefined; ... 24 more ...; exports?: string | ... 2 more ... | undefined; }',
				},
				{
					name: 'src_json',
					kind: 'variable',
					source_line: 120,
					type_signature: 'Src_Json',
				},
			],
			module_comment: '// Generated by package.gen.ts',
		},
		'./pkg.ts': {
			path: 'pkg.ts',
			declarations: [
				{
					name: 'Pkg',
					kind: 'type',
					doc_comment:
						'Combines `package_json` and `src_json` into a more convenient format.\nThis is our own version that uses our extended Src_Json type.',
					summary:
						'Combines `package_json` and `src_json` into a more convenient format.\nThis is our own version that uses our extended Src_Json type.',
					source_line: 12,
					type_signature: 'Pkg',
					properties: [
						{
							name: 'package_json',
							kind: 'variable',
							type_signature: 'Package_Json',
						},
						{
							name: 'src_json',
							kind: 'variable',
							type_signature: 'Src_Json',
						},
						{
							name: 'name',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'repo_name',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'repo_url',
							kind: 'variable',
							type_signature: 'Url',
						},
						{
							name: 'owner_name',
							kind: 'variable',
							type_signature: 'string | null',
							doc_comment: 'The github user/org.',
							summary: 'The github user/org.',
						},
						{
							name: 'homepage_url',
							kind: 'variable',
							type_signature: 'Url | null',
						},
						{
							name: 'logo_url',
							kind: 'variable',
							type_signature: 'Url | null',
						},
						{
							name: 'logo_alt',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'npm_url',
							kind: 'variable',
							type_signature: 'Url | null',
						},
						{
							name: 'changelog_url',
							kind: 'variable',
							type_signature: 'Url | null',
						},
						{
							name: 'published',
							kind: 'variable',
							type_signature: 'boolean',
						},
					],
				},
				{
					name: 'parse_pkg',
					kind: 'function',
					source_line: 30,
					type_signature:
						'(package_json: { [x: string]: unknown; name: string; version: string; private?: boolean | undefined; public?: boolean | undefined; description?: string | undefined; motto?: string | undefined; glyph?: string | undefined; ... 24 more ...; exports?: string | ... 2 more ... | undefined; }, src_json: Src_Json): Pkg',
					return_type: 'Pkg',
					parameters: [
						{
							name: 'package_json',
							type: '{ [x: string]: unknown; name: string; version: string; private?: boolean | undefined; public?: boolean | undefined; description?: string | undefined; motto?: string | undefined; glyph?: string | undefined; ... 24 more ...; exports?: string | ... 2 more ... | undefined; }',
							optional: false,
						},
						{
							name: 'src_json',
							type: 'Src_Json',
							optional: false,
						},
					],
				},
				{
					name: 'parse_repo_name',
					kind: 'function',
					source_line: 90,
					type_signature: '(name: string): string',
					return_type: 'string',
					parameters: [
						{
							name: 'name',
							type: 'string',
							optional: false,
						},
					],
				},
				{
					name: 'parse_org_url',
					kind: 'function',
					source_line: 101,
					type_signature: '(pkg: Pkg): string | null',
					return_type: 'string | null',
					parameters: [
						{
							name: 'pkg',
							type: 'Pkg',
							optional: false,
						},
					],
				},
				{
					name: 'pkg_context',
					kind: 'variable',
					source_line: 111,
					type_signature:
						'{ get: (error_message?: string | undefined) => Pkg; maybe_get: () => Pkg | undefined; set: (value: Pkg) => Pkg; }',
				},
			],
		},
		'./rune_helpers.svelte.ts': {
			path: 'rune_helpers.svelte.ts',
			declarations: [
				{
					name: 'effect_with_count',
					kind: 'function',
					doc_comment:
						'Runs `fn` in an `$effect`, passing `true` as the `skip` argument for the first `count` runs.\nCalls `fn` even when skipping so callers can read any dependent signals.',
					summary:
						'Runs `fn` in an `$effect`, passing `true` as the `skip` argument for the first `count` runs.\nCalls `fn` even when skipping so callers can read any dependent signals.',
					source_line: 5,
					type_signature: '(fn: (count: number) => void, initial?: number): void',
					return_type: 'void',
					parameters: [
						{
							name: 'fn',
							type: '(count: number) => void',
							optional: false,
						},
						{
							name: 'initial',
							type: 'number',
							optional: false,
							default_value: '0',
						},
					],
				},
			],
			module_comment:
				'Runs `fn` in an `$effect`, passing `true` as the `skip` argument for the first `count` runs.\nCalls `fn` even when skipping so callers can read any dependent signals.',
		},
		'./src_json.ts': {
			path: 'src_json.ts',
			declarations: [
				{
					name: 'Src_Module_Declaration_Kind',
					kind: 'type',
					doc_comment: 'Source code metadata types\n\nOriginally inlined from',
					summary: 'Source code metadata types',
					see_also: [
						'for JSDoc/TSDoc parsing',
						'for TypeScript AST extraction',
						'for Svelte component analysis',
					],
					source_line: 17,
					type_signature: 'Src_Module_Declaration_Kind',
				},
				{
					name: 'Parameter_Info',
					kind: 'type',
					doc_comment:
						'Parameter information for functions and methods\n\nNote: Kept distinct from Component_Prop_Info despite structural similarity.\nFunction parameters form a tuple - the collection has positional semantics:\n- Calling order matters: `fn(a, b)` vs `fn(b, a)`\n- May include rest parameters, destructuring patterns\n- Individual parameters are named, but position-dependent',
					summary: 'Parameter information for functions and methods',
					source_line: 35,
					type_signature: 'Parameter_Info',
					properties: [
						{
							name: 'name',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'type',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'optional',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'description',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'default_value',
							kind: 'variable',
							type_signature: 'string',
						},
					],
				},
				{
					name: 'Component_Prop_Info',
					kind: 'type',
					doc_comment:
						'Component prop information for Svelte components\n\nNote: Kept distinct from Parameter_Info despite structural similarity.\nComponent props are passed as named attributes with different semantics:\n- No positional order when passing: `<Foo {a} {b} />` = `<Foo {b} {a} />`\n- Support two-way binding via $bindable rune\n- Different runtime behavior and constraints',
					summary: 'Component prop information for Svelte components',
					source_line: 52,
					type_signature: 'Component_Prop_Info',
					properties: [
						{
							name: 'name',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'type',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'optional',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'description',
							kind: 'variable',
							type_signature: 'string',
						},
						{
							name: 'default_value',
							kind: 'variable',
							type_signature: 'string',
						},
					],
				},
				{
					name: 'Generic_Param_Info',
					kind: 'type',
					doc_comment: 'Generic type parameter information',
					summary: 'Generic type parameter information',
					source_line: 63,
					type_signature: 'Generic_Param_Info',
					properties: [
						{
							name: 'name',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Parameter name (e.g., "T")',
							summary: 'Parameter name (e.g., "T")',
						},
						{
							name: 'constraint',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Constraint if any (e.g., "string" from "T extends string")',
							summary: 'Constraint if any (e.g., "string" from "T extends string")',
						},
						{
							name: 'default_type',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Default type if any (e.g., "unknown" from "T = unknown")',
							summary: 'Default type if any (e.g., "unknown" from "T = unknown")',
						},
					],
				},
				{
					name: 'Src_Module_Declaration',
					kind: 'type',
					doc_comment: 'Declaration metadata with rich TypeScript/JSDoc information',
					summary: 'Declaration metadata with rich TypeScript/JSDoc information',
					source_line: 75,
					type_signature: 'Src_Module_Declaration',
					properties: [
						{
							name: 'name',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Export identifier',
							summary: 'Export identifier',
						},
						{
							name: 'kind',
							kind: 'variable',
							type_signature: 'Src_Module_Declaration_Kind | null',
							doc_comment: 'Declaration kind',
							summary: 'Declaration kind',
						},
						{
							name: 'doc_comment',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Full JSDoc/TSDoc comment text',
							summary: 'Full JSDoc/TSDoc comment text',
						},
						{
							name: 'summary',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Concise summary (first paragraph)',
							summary: 'Concise summary (first paragraph)',
						},
						{
							name: 'type_signature',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Full TypeScript type signature',
							summary: 'Full TypeScript type signature',
						},
						{
							name: 'source_line',
							kind: 'variable',
							type_signature: 'number',
							doc_comment: 'Source line number within the file',
							summary: 'Source line number within the file',
						},
						{
							name: 'parameters',
							kind: 'variable',
							type_signature: 'Array<Parameter_Info>',
							doc_comment: 'Function/method parameters',
							summary: 'Function/method parameters',
						},
						{
							name: 'return_type',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Function return type',
							summary: 'Function return type',
						},
						{
							name: 'return_description',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Function return value description from',
							summary: 'Function return value description from',
						},
						{
							name: 'generic_params',
							kind: 'variable',
							type_signature: 'Array<Generic_Param_Info>',
							doc_comment: 'Generic type parameters with constraints',
							summary: 'Generic type parameters with constraints',
						},
						{
							name: 'examples',
							kind: 'variable',
							type_signature: 'Array<string>',
							doc_comment: 'Code examples from @ example tags',
							summary: 'Code examples from @ example tags',
						},
						{
							name: 'deprecated_message',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Deprecation warning from @ deprecated tag',
							summary: 'Deprecation warning from @ deprecated tag',
						},
						{
							name: 'see_also',
							kind: 'variable',
							type_signature: 'Array<string>',
							doc_comment: 'Related items from @ see tags',
							summary: 'Related items from @ see tags',
						},
						{
							name: 'throws',
							kind: 'variable',
							type_signature: 'Array<{type?: string; description: string}>',
							doc_comment: 'Exceptions/errors thrown from @ throws tags',
							summary: 'Exceptions/errors thrown from @ throws tags',
						},
						{
							name: 'since',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Version information from @ since tag',
							summary: 'Version information from @ since tag',
						},
						{
							name: 'extends',
							kind: 'variable',
							type_signature: 'Array<string>',
							doc_comment: 'For types/interfaces: extends clause',
							summary: 'For types/interfaces: extends clause',
						},
						{
							name: 'implements',
							kind: 'variable',
							type_signature: 'Array<string>',
							doc_comment: 'For classes: implements clause',
							summary: 'For classes: implements clause',
						},
						{
							name: 'members',
							kind: 'variable',
							type_signature: 'Array<Src_Module_Declaration>',
							doc_comment: 'Class members',
							summary: 'Class members',
						},
						{
							name: 'properties',
							kind: 'variable',
							type_signature: 'Array<Src_Module_Declaration>',
							doc_comment: 'Interface/type properties',
							summary: 'Interface/type properties',
						},
						{
							name: 'props',
							kind: 'variable',
							type_signature: 'Array<Component_Prop_Info>',
							doc_comment: 'Component props (for Svelte components)',
							summary: 'Component props (for Svelte components)',
						},
					],
				},
				{
					name: 'Src_Module',
					kind: 'type',
					doc_comment: 'Module information with metadata',
					summary: 'Module information with metadata',
					source_line: 123,
					type_signature: 'Src_Module',
					properties: [
						{
							name: 'path',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Module path relative to src/lib',
							summary: 'Module path relative to src/lib',
						},
						{
							name: 'declarations',
							kind: 'variable',
							type_signature: 'Array<Src_Module_Declaration>',
							doc_comment: 'Exported declarations',
							summary: 'Exported declarations',
						},
						{
							name: 'module_comment',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Module-level JSDoc comment',
							summary: 'Module-level JSDoc comment',
						},
					],
				},
				{
					name: 'Src_Modules',
					kind: 'type',
					doc_comment: 'Collection of modules indexed by path',
					summary: 'Collection of modules indexed by path',
					source_line: 135,
					type_signature: 'Src_Modules',
				},
				{
					name: 'Src_Json',
					kind: 'type',
					doc_comment: 'Top-level source metadata',
					summary: 'Top-level source metadata',
					see_also: [
						'://github.com/ryanatkn/gro/blob/main/src/docs/gro_plugin_sveltekit_app.md#well-known-src',
					],
					source_line: 141,
					type_signature: 'Src_Json',
					properties: [
						{
							name: 'name',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Package name (same as package.json)',
							summary: 'Package name (same as package.json)',
						},
						{
							name: 'version',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Package version (same as package.json)',
							summary: 'Package version (same as package.json)',
						},
						{
							name: 'modules',
							kind: 'variable',
							type_signature: 'Src_Modules',
							doc_comment: 'Source modules',
							summary: 'Source modules',
						},
					],
				},
				{
					name: 'get_declaration_display_name',
					kind: 'function',
					doc_comment: "Helper to get a declaration's display name",
					summary: "Helper to get a declaration's display name",
					source_line: 153,
					type_signature: '(decl: Src_Module_Declaration): string',
					return_type: 'string',
					parameters: [
						{
							name: 'decl',
							type: 'Src_Module_Declaration',
							optional: false,
						},
					],
				},
				{
					name: 'get_type_summary',
					kind: 'function',
					doc_comment: 'Helper to get a short type summary for tooltips',
					summary: 'Helper to get a short type summary for tooltips',
					source_line: 171,
					type_signature: '(decl: Src_Module_Declaration): string | undefined',
					return_type: 'string | undefined',
					parameters: [
						{
							name: 'decl',
							type: 'Src_Module_Declaration',
							optional: false,
						},
					],
				},
				{
					name: 'generate_import_statement',
					kind: 'function',
					doc_comment: 'Generate import statement for a declaration',
					summary: 'Generate import statement for a declaration',
					source_line: 185,
					type_signature:
						'(decl: Src_Module_Declaration, module_path: string, pkg_name: string): string',
					return_type: 'string',
					parameters: [
						{
							name: 'decl',
							type: 'Src_Module_Declaration',
							optional: false,
						},
						{
							name: 'module_path',
							type: 'string',
							optional: false,
						},
						{
							name: 'pkg_name',
							type: 'string',
							optional: false,
						},
					],
				},
			],
			module_comment:
				'Source code metadata types\n\nOriginally inlined from @ryanatkn/belt, extended with rich documentation features:\n- Function parameter descriptions and default values\n- Return value documentation\n- JSDoc tag extraction (@ example, @ deprecated, @ see, @ since)\n- Component prop metadata for Svelte\n- Source location tracking\n- Generic type parameters\n\n@see tsdoc_helpers.ts for JSDoc/TSDoc parsing\n@see ts_helpers.ts for TypeScript AST extraction\n@see svelte_helpers.ts for Svelte component analysis',
		},
		'./storage.ts': {
			path: 'storage.ts',
			declarations: [
				{
					name: 'save_to_storage',
					kind: 'function',
					doc_comment: 'Utility function to save a value to `localStorage`.',
					summary: 'Utility function to save a value to `localStorage`.',
					source_line: 8,
					type_signature: '(key: string, value: any, is_json?: boolean): void',
					return_type: 'void',
					parameters: [
						{
							name: 'key',
							type: 'string',
							optional: false,
						},
						{
							name: 'value',
							type: 'any',
							optional: false,
						},
						{
							name: 'is_json',
							type: 'boolean',
							optional: false,
							default_value: 'false',
						},
					],
				},
				{
					name: 'load_from_storage',
					kind: 'function',
					doc_comment: 'Utility function to load a value from `localStorage` with optional parsing',
					summary: 'Utility function to load a value from `localStorage` with optional parsing',
					source_line: 26,
					type_signature:
						'<T>(key: string, is_json?: boolean, parse_fn?: ((value: unknown) => T | null) | undefined): T | null',
					return_type: 'T | null',
					return_description: 'The parsed value or null if not found or parsing fails',
					parameters: [
						{
							name: 'key',
							type: 'string',
							optional: false,
							description: 'The localStorage key',
						},
						{
							name: 'is_json',
							type: 'boolean',
							optional: false,
							description: 'Whether to parse the value as JSON',
							default_value: 'false',
						},
						{
							name: 'parse_fn',
							type: '((value: unknown) => T | null) | undefined',
							optional: true,
							description: 'Optional custom parsing function to transform the value',
						},
					],
				},
			],
		},
		'./svelte_helpers.ts': {
			path: 'svelte_helpers.ts',
			declarations: [
				{
					name: 'svelte_analyze_component',
					kind: 'function',
					doc_comment: 'Analyze a Svelte component from its svelte2tsx transformation.',
					summary: 'Analyze a Svelte component from its svelte2tsx transformation.',
					source_line: 23,
					type_signature:
						'(ts_code: string, source_file: SourceFile, checker: TypeChecker, component_name: string): Src_Module_Declaration',
					return_type: 'Src_Module_Declaration',
					parameters: [
						{
							name: 'ts_code',
							type: 'string',
							optional: false,
						},
						{
							name: 'source_file',
							type: 'SourceFile',
							optional: false,
						},
						{
							name: 'checker',
							type: 'TypeChecker',
							optional: false,
						},
						{
							name: 'component_name',
							type: 'string',
							optional: false,
						},
					],
				},
			],
			module_comment:
				'Svelte component analysis helpers.\n\nExtracts metadata from Svelte components using svelte2tsx transformations:\n\n- Component props with types and JSDoc\n- Component-level documentation\n- Type information\n\nUses the TypeScript Compiler API to parse the transformed output from svelte2tsx.\n\nAll functions are prefixed with `svelte_` for clarity.',
		},
		'./themer.svelte.ts': {
			path: 'themer.svelte.ts',
			declarations: [
				{
					name: 'Themer',
					kind: 'class',
					source_line: 8,
					members: [
						{
							name: 'theme',
							kind: 'variable',
							type_signature: 'Theme',
						},
						{
							name: 'color_scheme',
							kind: 'variable',
							type_signature: 'Color_Scheme',
						},
						{
							name: 'toJSON',
							kind: 'function',
							type_signature: '() => Themer_Json',
						},
					],
				},
				{
					name: 'Themer_Json',
					kind: 'type',
					source_line: 28,
					type_signature: 'Themer_Json',
					properties: [
						{
							name: 'theme',
							kind: 'variable',
							type_signature: 'Theme',
						},
						{
							name: 'color_scheme',
							kind: 'variable',
							type_signature: 'Color_Scheme',
						},
					],
				},
				{
					name: 'themer_context',
					kind: 'variable',
					source_line: 33,
					type_signature:
						'{ get: (error_message?: string | undefined) => Themer; maybe_get: () => Themer | undefined; set: (value: Themer) => Themer; }',
				},
				{
					name: 'sync_color_scheme',
					kind: 'function',
					source_line: 35,
					type_signature: '(color_scheme: Color_Scheme | null): void',
					return_type: 'void',
					parameters: [
						{
							name: 'color_scheme',
							type: 'Color_Scheme | null',
							optional: false,
						},
					],
				},
				{
					name: 'COLOR_SCHEME_STORAGE_KEY',
					kind: 'variable',
					source_line: 44,
					type_signature: '"fuz:color-scheme"',
				},
				{
					name: 'THEME_STORAGE_KEY',
					kind: 'variable',
					source_line: 45,
					type_signature: '"fuz:theme"',
				},
				{
					name: 'save_color_scheme',
					kind: 'function',
					source_line: 47,
					type_signature: '(color_scheme: Color_Scheme | null, key?: string): void',
					return_type: 'void',
					parameters: [
						{
							name: 'color_scheme',
							type: 'Color_Scheme | null',
							optional: false,
						},
						{
							name: 'key',
							type: 'string',
							optional: false,
							default_value: 'COLOR_SCHEME_STORAGE_KEY',
						},
					],
				},
				{
					name: 'load_color_scheme',
					kind: 'function',
					source_line: 54,
					type_signature: '(fallback?: Color_Scheme, key?: string): Color_Scheme',
					return_type: 'Color_Scheme',
					parameters: [
						{
							name: 'fallback',
							type: 'Color_Scheme',
							optional: false,
							default_value: "'auto'",
						},
						{
							name: 'key',
							type: 'string',
							optional: false,
							default_value: 'COLOR_SCHEME_STORAGE_KEY',
						},
					],
				},
				{
					name: 'save_theme',
					kind: 'function',
					source_line: 59,
					type_signature: '(theme: Theme | null, key?: string): void',
					return_type: 'void',
					parameters: [
						{
							name: 'theme',
							type: 'Theme | null',
							optional: false,
						},
						{
							name: 'key',
							type: 'string',
							optional: false,
							default_value: 'THEME_STORAGE_KEY',
						},
					],
				},
				{
					name: 'load_theme',
					kind: 'function',
					source_line: 63,
					type_signature: '(fallback?: Theme, key?: string): Theme',
					return_type: 'Theme',
					parameters: [
						{
							name: 'fallback',
							type: 'Theme',
							optional: false,
							default_value: 'default_themes[0]!',
						},
						{
							name: 'key',
							type: 'string',
							optional: false,
							default_value: 'THEME_STORAGE_KEY',
						},
					],
				},
			],
		},
		'./tome.ts': {
			path: 'tome.ts',
			declarations: [
				{
					name: 'Tome',
					kind: 'type',
					source_line: 8,
					type_signature:
						'ZodObject<{ name: ZodString; category: ZodString; component: ZodAny; related: ZodArray<ZodString>; }, $strip>',
				},
				{
					name: 'to_tome_pathname',
					kind: 'function',
					source_line: 18,
					type_signature:
						'(item: { name: string; category: string; component: any; related: string[]; }, docs_path?: string): string',
					return_type: 'string',
					parameters: [
						{
							name: 'item',
							type: '{ name: string; category: string; component: any; related: string[]; }',
							optional: false,
						},
						{
							name: 'docs_path',
							type: 'string',
							optional: false,
							default_value: 'DEFAULT_LIBRARY_PATH',
						},
					],
				},
				{
					name: 'tomes_context',
					kind: 'variable',
					source_line: 21,
					type_signature:
						'{ get: (error_message?: string | undefined) => Map<string, { name: string; category: string; component: any; related: string[]; }>; maybe_get: () => Map<string, { name: string; category: string; component: any; related: string[]; }> | undefined; set: (value: Map<...>) => Map<...>; }',
				},
				{
					name: 'get_tome_by_name',
					kind: 'function',
					source_line: 23,
					type_signature:
						'(name: string): { name: string; category: string; component: any; related: string[]; }',
					return_type: '{ name: string; category: string; component: any; related: string[]; }',
					parameters: [
						{
							name: 'name',
							type: 'string',
							optional: false,
						},
					],
				},
				{
					name: 'tome_context',
					kind: 'variable',
					source_line: 30,
					type_signature:
						'{ get: (error_message?: string | undefined) => { name: string; category: string; component: any; related: string[]; }; maybe_get: () => { name: string; category: string; component: any; related: string[]; } | undefined; set: (value: { ...; }) => { ...; }; }',
				},
			],
		},
		'./tooltip_state.svelte.ts': {
			path: 'tooltip_state.svelte.ts',
			declarations: [
				{
					name: 'Tooltip_State',
					kind: 'class',
					doc_comment:
						'Global tooltip state manager\n\nManages a single tooltip instance that can be shown/hidden\nwith sticky behavior (can move mouse into tooltip)',
					summary: 'Global tooltip state manager',
					source_line: 88,
					members: [
						{
							name: 'opened',
							kind: 'variable',
							type_signature: 'boolean',
						},
						{
							name: 'x',
							kind: 'variable',
							type_signature: 'number',
						},
						{
							name: 'y',
							kind: 'variable',
							type_signature: 'number',
						},
						{
							name: 'content',
							kind: 'variable',
							type_signature: 'Snippet | null',
						},
						{
							name: 'id',
							kind: 'variable',
							type_signature: 'string',
							doc_comment:
								'Unique ID for the tooltip element (for aria-describedby)\n\n**IMPORTANT**: Triggering elements must reference this ID via aria-describedby\nwhen the tooltip is open to ensure ARIA compliance.',
							summary: 'Unique ID for the tooltip element (for aria-describedby)',
						},
						{
							name: 'show_delay_ms',
							kind: 'variable',
							type_signature: 'number',
							doc_comment:
								'Show delay in milliseconds (ARIA pattern specifies "small delay" before showing)',
							summary:
								'Show delay in milliseconds (ARIA pattern specifies "small delay" before showing)',
						},
						{
							name: 'hide_delay_ms',
							kind: 'variable',
							type_signature: 'number',
							doc_comment:
								'Hide delay in milliseconds (for sticky behavior - allows moving cursor into tooltip)',
							summary:
								'Hide delay in milliseconds (for sticky behavior - allows moving cursor into tooltip)',
						},
						{
							name: '#show_timer',
							kind: 'variable',
							type_signature: 'ReturnType<typeof setTimeout> | null',
						},
						{
							name: '#hide_timer',
							kind: 'variable',
							type_signature: 'ReturnType<typeof setTimeout> | null',
						},
						{
							name: '#clear_timers',
							kind: 'function',
							type_signature: '() => void',
							doc_comment: 'Clear all pending timers (internal helper)',
							summary: 'Clear all pending timers (internal helper)',
						},
						{
							name: 'show',
							kind: 'function',
							type_signature: '(x: number, y: number, content: Snippet<[]>) => void',
							doc_comment: 'Show tooltip immediately at given position with content',
							summary: 'Show tooltip immediately at given position with content',
						},
						{
							name: 'show_delayed',
							kind: 'function',
							type_signature:
								'(x: number, y: number, content: Snippet<[]>, delay_ms?: number | undefined) => void',
							doc_comment:
								'Show tooltip after delay (ARIA compliance: "appears after a small delay")',
							summary: 'Show tooltip after delay (ARIA compliance: "appears after a small delay")',
						},
						{
							name: 'cancel_show',
							kind: 'function',
							type_signature: '() => void',
							doc_comment: 'Cancel a pending show operation',
							summary: 'Cancel a pending show operation',
						},
						{
							name: 'hide',
							kind: 'function',
							type_signature: '() => void',
							doc_comment: 'Hide tooltip immediately',
							summary: 'Hide tooltip immediately',
						},
						{
							name: 'hide_delayed',
							kind: 'function',
							type_signature: '(delay_ms?: number | undefined) => void',
							doc_comment:
								'Hide tooltip after delay (for sticky behavior - allows moving cursor into tooltip)',
							summary:
								'Hide tooltip after delay (for sticky behavior - allows moving cursor into tooltip)',
						},
						{
							name: 'cancel_hide',
							kind: 'function',
							type_signature: '() => void',
							doc_comment: 'Cancel a pending hide operation (for sticky behavior)',
							summary: 'Cancel a pending hide operation (for sticky behavior)',
						},
					],
				},
				{
					name: 'tooltip_context',
					kind: 'variable',
					doc_comment: 'Tooltip context for accessing global tooltip state',
					summary: 'Tooltip context for accessing global tooltip state',
					source_line: 216,
					type_signature:
						'{ get: (error_message?: string | undefined) => Tooltip_State; maybe_get: () => Tooltip_State | undefined; set: (value: Tooltip_State) => Tooltip_State; }',
				},
			],
			module_comment:
				'Tooltip state management for ARIA-compliant tooltips\n\nThis module provides a global tooltip system with:\n- ARIA-compliant show delays (hover triggers after ~400ms)\n- Sticky behavior (can move cursor into tooltip)\n- Keyboard navigation support (immediate show on focus)\n- Smart positioning with viewport edge detection\n\n## ARIA Compliance\n\nFollowing the [ARIA Tooltip Pattern](https://www.w3.org/WAI/ARIA/apg/patterns/tooltip/):\n- Tooltip has `role="tooltip"` (handled by Tooltip.svelte)\n- Tooltip has unique `id` (accessible via `tooltip.id`)\n- **IMPORTANT**: Triggering elements MUST reference tooltip via `aria-describedby`\n- Escape key dismisses tooltip (handled by Tooltip.svelte)\n- Tooltips remain non-focusable\n\n## Usage Pattern\n\n@example\n```ts\nimport {Tooltip_State, tooltip_context} from \'$lib/tooltip_state.svelte.js\';\n\n// Create and provide tooltip state\nconst tooltip = new Tooltip_State(400, 200);\ntooltip_context.set(tooltip);\n```\n\n@example\n```svelte\n<script lang="ts">\nimport {tooltip_context} from \'$lib/tooltip_state.svelte.js\';\n\nconst tooltip = tooltip_context.get();\nlet button_el: HTMLButtonElement;\n\n// Show on hover (with delay)\nconst on_mouse_enter = (e: MouseEvent) => {\n  tooltip.show_delayed(e.clientX, e.clientY, my_tooltip_content);\n};\n\n// Show on focus (immediate for keyboard users)\nconst on_focus = () => {\n  const rect = button_el.getBoundingClientRect();\n  tooltip.show(rect.left + rect.width / 2, rect.bottom, my_tooltip_content);\n};\n\n// Hide with delay (allows moving cursor into tooltip)\nconst on_mouse_leave = () => tooltip.hide_delayed();\n\n// Hide immediately on blur\nconst on_blur = () => tooltip.hide();\n</script>\n\n<!-- IMPORTANT: Set aria-describedby when tooltip is open -->\n<button\n  bind:this={button_el}\n  aria-describedby={tooltip.opened ? tooltip.id : undefined}\n  onmouseenter={on_mouse_enter}\n  onmouseleave={on_mouse_leave}\n  onfocus={on_focus}\n  onblur={on_blur}\n>\n  Hover or focus me\n</button>\n\n{#snippet my_tooltip_content()}\n  <div>This is the tooltip content</div>\n{/snippet}\n```',
		},
		'./ts_helpers.ts': {
			path: 'ts_helpers.ts',
			declarations: [
				{
					name: 'ts_infer_declaration_kind',
					kind: 'function',
					doc_comment: 'Infer declaration kind from symbol and node.',
					summary: 'Infer declaration kind from symbol and node.',
					source_line: 57,
					type_signature:
						'(symbol: Symbol, node: Node): "function" | "type" | "variable" | "class" | null',
					return_type: '"function" | "type" | "variable" | "class" | null',
					parameters: [
						{
							name: 'symbol',
							type: 'Symbol',
							optional: false,
						},
						{
							name: 'node',
							type: 'Node',
							optional: false,
						},
					],
				},
				{
					name: 'ts_extract_function_info',
					kind: 'function',
					doc_comment:
						'Extract function/method information including parameters\nwith descriptions and default values.',
					summary:
						'Extract function/method information including parameters\nwith descriptions and default values.',
					source_line: 88,
					type_signature:
						'(node: Node, symbol: Symbol, checker: TypeChecker, decl: Src_Module_Declaration, tsdoc: Tsdoc_Parsed_Comment | undefined): void',
					return_type: 'void',
					parameters: [
						{
							name: 'node',
							type: 'Node',
							optional: false,
						},
						{
							name: 'symbol',
							type: 'Symbol',
							optional: false,
						},
						{
							name: 'checker',
							type: 'TypeChecker',
							optional: false,
						},
						{
							name: 'decl',
							type: 'Src_Module_Declaration',
							optional: false,
						},
						{
							name: 'tsdoc',
							type: 'Tsdoc_Parsed_Comment | undefined',
							optional: false,
						},
					],
				},
				{
					name: 'ts_extract_type_info',
					kind: 'function',
					doc_comment: 'Extract type/interface information with rich property metadata.',
					summary: 'Extract type/interface information with rich property metadata.',
					source_line: 157,
					type_signature:
						'(node: Node, _symbol: Symbol, checker: TypeChecker, decl: Src_Module_Declaration): void',
					return_type: 'void',
					parameters: [
						{
							name: 'node',
							type: 'Node',
							optional: false,
						},
						{
							name: '_symbol',
							type: 'Symbol',
							optional: false,
						},
						{
							name: 'checker',
							type: 'TypeChecker',
							optional: false,
						},
						{
							name: 'decl',
							type: 'Src_Module_Declaration',
							optional: false,
						},
					],
				},
				{
					name: 'ts_extract_class_info',
					kind: 'function',
					doc_comment: 'Extract class information with rich member metadata.',
					summary: 'Extract class information with rich member metadata.',
					source_line: 224,
					type_signature:
						'(node: Node, _symbol: Symbol, checker: TypeChecker, decl: Src_Module_Declaration): void',
					return_type: 'void',
					parameters: [
						{
							name: 'node',
							type: 'Node',
							optional: false,
						},
						{
							name: '_symbol',
							type: 'Symbol',
							optional: false,
						},
						{
							name: 'checker',
							type: 'TypeChecker',
							optional: false,
						},
						{
							name: 'decl',
							type: 'Src_Module_Declaration',
							optional: false,
						},
					],
				},
				{
					name: 'ts_extract_variable_info',
					kind: 'function',
					doc_comment: 'Extract variable information.',
					summary: 'Extract variable information.',
					source_line: 301,
					type_signature:
						'(node: Node, symbol: Symbol, checker: TypeChecker, decl: Src_Module_Declaration): void',
					return_type: 'void',
					parameters: [
						{
							name: 'node',
							type: 'Node',
							optional: false,
						},
						{
							name: 'symbol',
							type: 'Symbol',
							optional: false,
						},
						{
							name: 'checker',
							type: 'TypeChecker',
							optional: false,
						},
						{
							name: 'decl',
							type: 'Src_Module_Declaration',
							optional: false,
						},
					],
				},
				{
					name: 'ts_extract_module_comment',
					kind: 'function',
					doc_comment: 'Extract module-level comment.',
					summary: 'Extract module-level comment.',
					source_line: 318,
					type_signature: '(source_file: SourceFile): string | undefined',
					return_type: 'string | undefined',
					parameters: [
						{
							name: 'source_file',
							type: 'SourceFile',
							optional: false,
						},
					],
				},
				{
					name: 'ts_create_program',
					kind: 'function',
					doc_comment: 'Create TypeScript program for analysis.',
					summary: 'Create TypeScript program for analysis.',
					source_line: 341,
					type_signature: '(log: { warn: (message: string) => void; }): Program | null',
					return_type: 'Program | null',
					parameters: [
						{
							name: 'log',
							type: '{ warn: (message: string) => void; }',
							optional: false,
						},
					],
				},
			],
			module_comment:
				'TypeScript compiler API helpers for extracting metadata from source code.\n\nAll functions are prefixed with `ts_` for clarity.',
		},
		'./tsdoc_helpers.ts': {
			path: 'tsdoc_helpers.ts',
			declarations: [
				{
					name: 'Tsdoc_Parsed_Comment',
					kind: 'type',
					doc_comment: 'Parsed JSDoc/TSDoc comment with structured metadata.',
					summary: 'Parsed JSDoc/TSDoc comment with structured metadata.',
					source_line: 32,
					type_signature: 'Tsdoc_Parsed_Comment',
					properties: [
						{
							name: 'full_text',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Full comment text (excluding comment markers)',
							summary: 'Full comment text (excluding comment markers)',
						},
						{
							name: 'summary',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'First paragraph summary',
							summary: 'First paragraph summary',
						},
						{
							name: 'params',
							kind: 'variable',
							type_signature: 'Map<string, string>',
							doc_comment: 'Parameter descriptions mapped by parameter name',
							summary: 'Parameter descriptions mapped by parameter name',
						},
						{
							name: 'returns',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Return value description from @ returns or @ return',
							summary: 'Return value description from @ returns or @ return',
						},
						{
							name: 'throws',
							kind: 'variable',
							type_signature: 'Array<{type?: string; description: string}>',
							doc_comment: 'Thrown errors from @ throws',
							summary: 'Thrown errors from @ throws',
						},
						{
							name: 'examples',
							kind: 'variable',
							type_signature: 'Array<string>',
							doc_comment: 'Code examples from @ example',
							summary: 'Code examples from @ example',
						},
						{
							name: 'deprecated_message',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Deprecation message from @ deprecated',
							summary: 'Deprecation message from @ deprecated',
						},
						{
							name: 'see_also',
							kind: 'variable',
							type_signature: 'Array<string>',
							doc_comment: 'Related references from @ see',
							summary: 'Related references from @ see',
						},
						{
							name: 'since',
							kind: 'variable',
							type_signature: 'string',
							doc_comment: 'Version information from @ since',
							summary: 'Version information from @ since',
						},
					],
				},
				{
					name: 'tsdoc_parse',
					kind: 'function',
					doc_comment:
						'Parse JSDoc comment from a TypeScript node.\n\nExtracts and parses all JSDoc tags including:\n\n- @ param - parameter descriptions\n- @ returns/@ return - return value description\n- @ throws - error documentation\n- @ example - code examples\n- @ deprecated - deprecation warnings\n- @ see - related references\n- @ since - version information',
					summary: 'Parse JSDoc comment from a TypeScript node.',
					source_line: 69,
					type_signature:
						'(node: Node, _source_file: SourceFile): Tsdoc_Parsed_Comment | undefined',
					return_type: 'Tsdoc_Parsed_Comment | undefined',
					parameters: [
						{
							name: 'node',
							type: 'Node',
							optional: false,
							description: '- The TypeScript node to extract JSDoc from',
						},
						{
							name: '_source_file',
							type: 'SourceFile',
							optional: false,
							description: '- Source file (unused, kept for API consistency)',
						},
					],
				},
				{
					name: 'tsdoc_apply_to_declaration',
					kind: 'function',
					doc_comment:
						'Apply parsed TSDoc metadata to a declaration.\n\nConsolidates the common pattern of assigning TSDoc fields to declarations,\nwith conditional assignment for array fields (only if non-empty).',
					summary: 'Apply parsed TSDoc metadata to a declaration.',
					source_line: 155,
					type_signature: '(decl: any, tsdoc: Tsdoc_Parsed_Comment | undefined): void',
					return_type: 'void',
					parameters: [
						{
							name: 'decl',
							type: 'any',
							optional: false,
							description: '- The declaration to update',
						},
						{
							name: 'tsdoc',
							type: 'Tsdoc_Parsed_Comment | undefined',
							optional: false,
							description: '- The parsed TSDoc comment (if available)',
						},
					],
				},
			],
			module_comment:
				'TSDoc/JSDoc parsing helpers using the TypeScript Compiler API.\n\nProvides `tsdoc_parse()` for extracting JSDoc/TSDoc from TypeScript nodes.\n\n## How it works\n\nUses TypeScript\'s built-in `ts.getJSDocCommentsAndTags()` API to extract\nstructured documentation from AST nodes.\n\n## Behavioral notes (due to TS Compiler API)\n\n- Preserves dash separator in @param descriptions: `@param x - desc` â†’ `"- desc"`\n- @throws tags have {Type} stripped by TS API; fallback regex extracts first word as error type\n- @see tags return unreliable values ("*" or undefined) from TS API\n\n## Usage\n\nWorks on all TypeScript nodes, including:\n- Regular TypeScript files (.ts, .tsx)\n- Transformed output from svelte2tsx\n- Any node with JSDoc comments in the AST\n\nAll functions are prefixed with `tsdoc_` for clarity.',
		},
	},
};
